(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(1600, 1200, Phaser.AUTO, 'Demo'); 

game.state.add('Boot', require('./states/boot'));
game.state.add('Demo', require('./states/demo'));

game.state.start('Boot');
},{"./states/boot":"d:\\GIT\\MaserUI\\samples\\demoProject\\src\\js\\states\\boot.js","./states/demo":"d:\\GIT\\MaserUI\\samples\\demoProject\\src\\js\\states\\demo.js"}],"d:\\GIT\\MaserUI\\build\\maserUI.js":[function(require,module,exports){
(function(){

/**
 * @namespace MaserUI
 */
var MaserUI = MaserUI || {
        VERSION: 0.1
    };
/**
 * @class Panel
 * @constructor
 * @extends Phaser.Image
 * @param {Phaser.Game} game - A reference to the currently running game.
 * @param {Object} [settings] - settings for ui panel
 * @param {string} [settings.backAtlas] - if you want to set background image, you should set atlas and back imqge
 * @param {string} [settings.backImage] - if you want to set background image, you should set atlas and back imqge
 * @param {string} [settings.backColor] - if you want to have solid background color, set this to "#FFFFFF" color format, if you will leave this empty as well as images panel will be transparent
 * @param {number} [settings.width] - absolute width
 * @param {number} [settings.height] - absolute height
 * @param {number[]} [settings.relativeSize] - array of two numbers from 0 to 1, for width and height accordingly, for example [0.5,0.5] if one of them 0 than than absolute size will be used instead
 * @param {Panel.Alignment[]} [settings.alignment] - array of alignments that will be assigned to the object
 * @param {number[]} [settings.heightBounds] - array of height bounds [min,max] 0 - means that there no bound
 * @param {number[]} [settings.widthBounds] - array of width bounds [min,max] 0 - means that there no bound
 * @param {Panel.StretchOptions} [settings.stretch] stretching option (fill,uniform etc..)
 * @param {number[]} [settings.pivot] pivot point, array contains two numbers for width and height, from 0 to 1, for example [1,1]
 * @param {number[]} [settings.margins] left, top, right, bottom
 */
MaserUI.Panel = function (game, settings) {
    "use strict";
    this.game = game;
    this.settings = {};
    this.assignSettings(settings);

    // Set default image to a texture
    if (this.settings.backAtlas && this.settings.backImage) {
        Phaser.Image.call(this, this.game, 0, 0, this.settings.backAtlas, this.settings.backImage);
        // If we loaded an image and we are not overriding the dimensions, then set the original size to the image's size
        if (!this.settings.width && !this.settings.height) {
            this.settings.originalSize.x = this.width;
            this.settings.originalSize.y = this.height;
        }
    }
    // Or draw a colored rectangle to represent this panel
    else if (this.settings.backColor !== null && this.settings.backColor !== undefined) {
        this.setBackColor.call(this, this.settings.width, this.settings.height, this.settings.backColor);
        Phaser.Image.call(this, game, 0, 0, this.backColor);
    }
    // If no image settings were passed, then draw a yellow rectangle
    else {
        this.setBackColor.call(this, this.settings.width, this.settings.height, "0xfff000", 0);
        Phaser.Image.call(this, game, 0, 0, this.backColor);
    }
};

MaserUI.Panel.prototype = Object.create(Phaser.Image.prototype);
MaserUI.Panel.prototype.constructor = MaserUI.Panel;

/**
 * Panel.Alignment array contains information about anchor
 * @type {*[]}
 */
MaserUI.Panel.prototype.alignment = "free";

// ========================= Settings =========================
/**
 * @method MaserUI.Panel#assignSettings
 * @memberof MaserUI.Panel
 * @param settings
 */
MaserUI.Panel.prototype.assignSettings = function(settings){
    "use strict";
    this.settings = settings;
    if(this.settings == null) { // jshint ignore:line
        this.settings = {};
    }
    var result = this.settings;
    if (!result.alignment) { result.alignment = [MaserUI.Panel.Alignment.free]; }
    if (!result.margins) { result.margins = [0, 0, 0, 0]; }
    if (!result.restrictWidthStretching) { result.restrictWidthStretching = false; }
    if (!result.restrictHeightStretching) { result.restrictHeightStretching = false; }
    if (!result.stretch) { result.stretch = MaserUI.Panel.StretchOptions.none; }
    if (!result.widthBounds) { result.widthBounds = []; }
    if (!result.heightBounds) { result.heightBounds = []; }

    // Points
    if (!result.offset) { result.offset = new Phaser.Point(0, 0); }
    else { result.offset = new Phaser.Point(result.offset[0], result.offset[1]); }
    if (!result.pivot) { result.pivot = new Phaser.Point(0,0); }
    else { result.pivot = new Phaser.Point(result.pivot[0],result.pivot[1]); }
    if (!result.width && !result.height) { result.originalSize = new Phaser.Point(1, 1); }
    else { result.originalSize = new Phaser.Point(result.width, result.height); }
    if (!result.relativeSize) { result.relativeSize = new Phaser.Point(0, 0); }
    else { result.relativeSize = new Phaser.Point(result.relativeSize[0], result.relativeSize[1]); }
};


// ========================= Properties =========================
/**
 * Alignment array that contains values for current panel (top,bottom,left,right)
 * which will be use to set the anchor position for the panel
 */
Object.defineProperty(MaserUI.Panel.prototype, "Alignment", {
    get: function () {
        "use strict";
        return this.settings.alignment;
    },
    set: function (value) {
        "use strict";
        this.setAlignment(value);
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "Offset", {
    get: function () {
        "use strict";
        return this.settings.offset;
    },
    set: function (value) {
        "use strict";
        this.setOffset(value);
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "OriginalSize", {
    get: function () {
        "use strict";
        return this.settings.originalSize;
    },
    set: function (value) {
        "use strict";
        this.settings.originalSize = value;
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "ParentWidth", {
    get: function () {
        "use strict";
        return this.parent.width;
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "ParentHeight", {
    get: function () {
        "use strict";
        return this.parent.height;
    }
});

/**
 * Size relative to parent container, set Phaser.Point with values from [0,0] to [0,1]
 * if set "undefined" will use absolute size,
 */
Object.defineProperty(MaserUI.Panel.prototype, "RelativeSize", {
    get: function () {
        "use strict";
        return this.settings.relativeSize;
    },
    set: function (value) {
        "use strict";
        this.settings.relativeSize = value;
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "RestrictHeightStretching", {
    get: function () {
        "use strict";
        return this.settings.restrictHeightStretching;
    },
    set: function (value) {
        "use strict";
        this.settings.restrictHeightStretching = value;
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "RestrictWidthStretching", {
    get: function () {
        "use strict";
        return this.settings.restrictWidthStretching;
    },
    set: function (value) {
        "use strict";
        this.settings.restrictWidthStretching = value;
    }
});

Object.defineProperty(MaserUI.Panel.prototype, "Stretch", {
    get: function () {
        "use strict";
        return this.settings.stretch;
    },
    set: function (value) {
        "use strict";
        this.settings.stretch = value;
    }
});


// ========================= Getters =========================
MaserUI.Panel.prototype.getMargin = function (alignment) {
    "use strict";
    switch(alignment) {
        case MaserUI.Panel.Alignment.left: return this.settings.margins[0];
        case MaserUI.Panel.Alignment.top: return this.settings.margins[1];
        case MaserUI.Panel.Alignment.right: return this.settings.margins[2];
        case MaserUI.Panel.Alignment.bottom: return this.settings.margins[3];
        default: return 0;
    }
};

// ========================= Setters =========================
/**
 * Array that contains Panel.Alignment settings
 * @param alignmentArray
 */
MaserUI.Panel.prototype.setAlignment = function (alignmentArray) {
    "use strict";
    this.settings.alignment = alignmentArray;
};

/**
* [private] sets the back color of the panel if there no back color then transparent
* @param width
* @param height
* @param backColor
*/
MaserUI.Panel.prototype.setBackColor = function (width, height, backColor, alpha) {
    "use strict";
    this.backColor = this.game.make.bitmapData(width, height);

    if (!backColor) {
        this.color = {
            a: 0,
            b: 0,
            r: 0,
            g: 0
        };
    }
    else {
        this.color = Phaser.Color.hexToColor(backColor);
        if (alpha === null || alpha === undefined) {
            this.color.a = 1;
        }
        else {
            this.color.a = alpha;
        }
    }
    this.backColor.fill(this.color.r, this.color.g, this.color.b, this.color.a);
};

MaserUI.Panel.prototype.setBackImage = function (backAtlas, backImage) {
    "use strict";
    //if(this.backgroundImage === null || this.backgroundImage === undefined){
    //    this.loadTexture
    this.loadTexture(backAtlas, backImage);
    //Phaser.Image.call(this, this.game, 0, 0,  backAtlas, backImage);
    //}
    //else{
    //this.backgroundImage.loadTexture(backAtlas,backImage);
    //}
};

/**
 * sets height bounds, if min = 0 - there now min bound (absolute or relative size will be used instead,
 * if max == 0 - there no max limitation(absolute or relative size will be used instead)
 * @param min
 * @param max
 */
MaserUI.Panel.prototype.setHeightBounds = function (min, max) {
    "use strict";
    this.settings.heightBounds = [min, max];
};

MaserUI.Panel.prototype.setLinkedAnchors = function (left, top, right, bottom) {
    "use strict";
    this.linkedLeft = left;
    this.linkedTop = top;
    this.linkedRight = right;
    this.linkedBottom = bottom;
};

MaserUI.Panel.prototype.setMargins = function (left, top, right, bottom) {
    "use strict";
    this.settings.margins = [left, top, right, bottom];
};

MaserUI.Panel.prototype.setOffset = function (offset) {
    "use strict";
    this.settings.offset = offset;
};

/**
 * Set the pivot point of the panel values from [0,0] to [1,1]
 * @param pivotPoint
 */
MaserUI.Panel.prototype.setPivot = function (pivotPoint) {
    "use strict";
    this.settings.pivot = pivotPoint;
};

/**
 * Sets relative size
 * @param width
 * @param height
 */
MaserUI.Panel.prototype.setRelativeSize = function (width, height) {
    "use strict";
    this.settings.relativeSize = new Phaser.Point(width, height);
};

/**
 * sets width bounds, if min = 0 - there now min bound (absolute or relative size will be used instead,
 * if max == 0 - there no max limitation(absolute or relative size will be used instead)
 * @param min
 * @param max
 */
MaserUI.Panel.prototype.setWidthBounds = function (min, max) {
    "use strict";
    this.settings.widthBounds = [min, max];
};


// ========================= Checks =========================
MaserUI.Panel.prototype.checkPanelBounds = function () {
    "use strict";
    if (this.width < this.settings.widthBounds[0] && this.settings.widthBounds[0] !== 0) {
        this.width = this.settings.widthBounds[0];
    }
    if (this.width > this.settings.widthBounds[1] && this.settings.widthBounds[1] !== 0) {
        this.width = this.settings.widthBounds[1];
    }
    if (this.height < this.settings.heightBounds[0] && this.settings.heightBounds[0] !== 0) {
        this.height = this.settings.heightBounds[0];
    }
    if (this.height > this.settings.heightBounds[1] && this.settings.heightBounds[1] !== 0) {
        this.height = this.settings.heightBounds[1];
    }
};

MaserUI.Panel.prototype.checkLinkedAnchors = function () {
    "use strict";
};


// ========================= Update =========================
/**
 * Whenever a panel adds a child, it will immediately update the child's transform and size
 * @param child
 */
MaserUI.Panel.prototype.addChild = function (child) {
    "use strict";
    Phaser.Image.prototype.addChild.call(this, child);
    //if (typeof child.updateTransform === "function") {
    //    child.updateTransform();
    //}
};

// ========================= Update =========================
MaserUI.Panel.prototype.update = function () {
    "use strict";
    //this.processSize();
    for (var i = 0, len = this.children.length; i < len; i++) {
        this.children[i].update();
    }
};

MaserUI.Panel.prototype.updateTransform = function () {
    "use strict";
    if (!this.visible) { return; }
    this.displayObjectUpdateTransform();

    //PIXI.DisplayObject.prototype.updateTransform.call( this );
    if (this._cacheAsBitmap) { return; }
    for (var i = 0, j = this.children.length; i < j; i++) {
        this.children[i].updateTransform();
    }
};

MaserUI.Panel.prototype.displayObjectUpdateTransform = function () {
    "use strict";

    //this.height = this.parent.height;

    // Create some matrix refs for easy access
    var pt = this.parent.worldTransform;
    var wt = this.worldTransform;
    // Temporary matrix variables
    var a, b, c, d, tx, ty;

    // This gets the real width of parent and child
    var width = this.texture.frame.width;
    var height = this.texture.frame.height;
    var parentWidth = this.parent.width;
    var parentHeight = this.parent.height;
    if (this.parent.texture) {
        parentWidth = this.parent.texture.frame.width;
        parentHeight = this.parent.texture.frame.height;
    }

    var w0 = parentWidth * (1 - this.anchor.x);
    var w1 = parentWidth * -this.anchor.x;

    var h0 = parentHeight * (1 - this.anchor.y);
    var h1 = parentHeight * -this.anchor.y;

    var x3 = pt.a * w0 + pt.c * h0; // parent width
    var y3 = pt.d * h0 + pt.b * w0; // parent height

    //console.log("values",w0,w1,h0,h1,x1,y1,x2,y2,x3,y3,x4,y4,this.scale.x,this.scale.y,this.settings.originalSize.x,this.settings.originalSize.y,width,height,this.settings.stretch);
    //I f the panel is set to a relative size, this is what will happen
    if (this.settings.relativeSize) {
        if (this.settings.relativeSize.x !== 0) {
            this.scale.x = (x3 * this.settings.relativeSize.x) / width;
        }
        if (this.settings.relativeSize.y !== 0) {
            this.scale.y = (y3 * this.settings.relativeSize.y) / height;
        }
        if(this.restrictWidthStretching && this.scale.x > this.scale.y){
            this.scale.x = this.scale.y;
        }
        if(this.restrictHeightStretching){console.log("restr",this.restrictHeightStretching  ,this.scale.y ,this.scale.x);}
        if(this.restrictHeightStretching  && this.scale.y > this.scale.x){
            this.scale.y = this.scale.x;
        }
    }

    // Panels can't be both relative size and stretching, so if this will override the relative size if it's set
    // Add some sort of scaling rule
    var scale;
    switch (this.settings.stretch) {
        case MaserUI.Panel.StretchOptions.fill:
            //this.scale.x = pt.a;
            //this.scale.y = pt.d;
            this.width = x3;
            this.height = y3;
            break;

        case MaserUI.Panel.StretchOptions.uniform:
            if (this.settings.relativeSize.x !== 0) {
                this.scale.x = this.scale.y = Math.min(x3 * this.settings.relativeSize.x / this.settings.originalSize.x, y3 / this.settings.originalSize.y);
            }
            else if (this.settings.relativeSize.y !== 0) {
                this.scale.x = this.scale.y = Math.min(x3 / this.settings.originalSize.x, y3 * this.settings.relativeSize.y / this.settings.originalSize.y);
            }
            else {
                this.scale.x = this.scale.y = Math.min(x3 * this.settings.relativeSize.x / this.settings.originalSize.x, y3 * this.settings.relativeSize.y / this.settings.originalSize.y);
            }
            break;

        case MaserUI.Panel.StretchOptions.uniformToFill:
            this.scale.x = 1 / this.parent.scale.x;
            this.scale.y = 1 / this.parent.scale.y;
            var ratioH = this.width / this.height;
            var ratioV = this.height / this.width;
            if (this.parent.width >= this.parent.height && this.width !== this.parent.width) {
                this.width = this.ParentWidth;
                this.height = this.ParentWidth * ratioV;

            }
            else if (this.parent.width < this.parent.height && this.height !== this.parent.height) {
                this.height = this.ParentHeight;
                this.width = this.ParentHeight * ratioH;
            }
            break;

    }

    this.checkPanelBounds();

    // calculating final transformation matrix based on above settings
    a = this.scale.x;
    d = this.scale.y;
    wt.a = a * pt.a;
    wt.b = a * pt.b;
    wt.c = d * pt.c;
    wt.d = d * pt.d;

    tx = this.position.x - this.settings.pivot.x * width * a;
    ty = this.position.y - this.settings.pivot.y * height * d;

    var gwt = this.game.stage.worldTransform;
    wt.a = a * gwt.a;
    wt.b = a * gwt.b;
    wt.c = d * gwt.c;
    wt.d = d * gwt.d;

    wt.tx = tx * pt.a + ty * pt.c + pt.tx;
    wt.ty = tx * pt.b + ty * pt.d + pt.ty;


    // Anchoring once the scale has been applied
    if (this.settings.alignment.indexOf(MaserUI.Panel.Alignment.free) < 0) {
        if (this.settings.alignment.indexOf(MaserUI.Panel.Alignment.center) >= 0) {
            wt.tx = x3 * 0.5 + pt.tx + tx;
            wt.ty = y3 * 0.5 + pt.ty + ty;
        }
        if (this.settings.alignment.indexOf(MaserUI.Panel.Alignment.top) >= 0) {
            if (this.settings.alignment.length === 1) {
                wt.tx = x3 * 0.5 + pt.tx + tx;
            }
            wt.ty = pt.ty + ty;
        }
        if (this.settings.alignment.indexOf(MaserUI.Panel.Alignment.bottom) >= 0) {
            if (this.settings.alignment.length === 1) {
                wt.tx = x3 * 0.5 + pt.tx + tx;
            }
            wt.ty = y3 + pt.ty + ty;
        }
        if (this.settings.alignment.indexOf(MaserUI.Panel.Alignment.left) >= 0) {
            wt.tx = pt.tx + tx;
            if (this.settings.alignment.length === 1) {
                wt.ty = y3 * 0.5 + pt.ty + ty;
            }
        }
        if (this.settings.alignment.indexOf(MaserUI.Panel.Alignment.right) >= 0) {
            wt.tx = x3 + pt.tx + tx;
            if (this.settings.alignment.length === 1) {
                wt.ty = y3 * 0.5 + pt.ty + ty;
            }
        }
    }

    var bounds;

    if (this.linkedLeft) {
        bounds =  this.linkedLeft.getBounds();
        var lwt = this.linkedLeft.worldTransform;
        wt.tx = lwt.tx + bounds.width;
    }
    if (this.linkedRight) {
        bounds =  this.linkedRight.getBounds();
        if( this.settings.alignment.indexOf(MaserUI.Panel.Alignment.right) >= 0) {
            var rwt = this.linkedRight.worldTransform;
            wt.tx = rwt.tx - this.width;
            console.log(rwt.tx , bounds.x , this.width);
        }
        else {
            this.width = bounds.x - wt.tx;
        }
    }
    if (this.linkedTop) {
        bounds =  this.linkedTop.getBounds();
        var twt = this.linkedTop.worldTransform;
        wt.ty = twt.ty + bounds.height;
    }
    if (this.linkedBottom) {
        bounds =  this.linkedBottom.getBounds();
        this.height = bounds.y - wt.ty;
    }

    // multiply the alphas..
    this.worldAlpha = this.alpha * this.parent.worldAlpha;
    //  Custom callback?
    if (this.transformCallback) {
        this.transformCallback.call(this.transformCallbackContext, wt, pt);
    }
};


// ========================= Enums =========================
/**
 * stretching options
 * @type {{fill: string, uniform: string, uniformToFill: string}}
 */
MaserUI.Panel.StretchOptions = {
    none: "none",
    fill: "fill", //fill and skew
    uniform: "uniform", //use smallest width or height
    uniformToFill: "uniformToFill" // use biggest width or height
};
Object.freeze(MaserUI.Panel.StretchOptions);

/**
 * alignment options
 * @type {{free: string, top: string, left: string, right: string, bottom: string, center: string}}
 */
MaserUI.Panel.Alignment = {
    free: "free",
    top: "top",
    left: "left",
    right: "right",
    bottom: "bottom",
    center: "center"
};

Object.freeze(MaserUI.Panel.Alignment);
// ========================= Construction =========================
/**
 *
 * @param game
 * @param settings
 * @param text
 * @param style
 * @constructor
 */
MaserUI.TextBlock = function (game, settings, text, style) {
    "use strict";
    MaserUI.Panel.call(this, game, settings);
    this.textField = new Phaser.Text(game, 1, 1, text, style);
    this.textField.anchor.setTo(0.5, 0.5);
    this.textField.x = this.width * 0.5;
    this.textField.y = this.height * 0.5;
    this.addChild(this.textField);
    this.resizeToFitText();
};



// ========================= Prototype =========================
MaserUI.TextBlock.prototype = Object.create(MaserUI.Panel.prototype);
MaserUI.TextBlock.prototype.constructor = MaserUI.TextBlock;

// ========================= Methods =========================
MaserUI.TextBlock.prototype.setText = function (text) {
    "use strict";
    this.textField.setText(text);
};
MaserUI.TextBlock.prototype.setAnchorTo = function (pivotX, pivotY) {
    "use strict";
    this.textField.anchor.setTo(pivotX, pivotY);
};
MaserUI.TextBlock.prototype.resizeToFitText = function() {
    "use strict";
    this.texture.frame.height = this.textField.height;
    this.texture.frame.width = this.textField.width;
    this.textField.x = this.textField.width * 0.5;
    this.textField.y = this.textField.height * 0.5;
    this.OriginalSize = new Phaser.Point(this.textField.width, this.textField.height);
};

// ========================= Properties =========================
Object.defineProperty(MaserUI.TextBlock.prototype, "TextHeight", {
    get: function() {
        "use strict";
        return this.textField.height;
    }
});

// ========================= Update =========================
MaserUI.TextBlock.prototype.update = function () {
    "use strict";

};
/**
 *
 * @param game
 * @param settings
 * @param atlas
 * @param callback
 * @param callbackContext
 * @param upFrame
 * @param downFrame
 * @constructor
 */
MaserUI.Button = function (game, settings, atlas, callback, callbackContext, upFrame, downFrame) {
    'use strict';
    MaserUI.Panel.call(this, game, settings);
    this.game = game;
    // Create button
    this.button = new Phaser.Button(game, 0, 0, atlas, callback, callbackContext, upFrame, upFrame, downFrame, upFrame);
    this.button.anchor.setTo(0.5, 0.5);
    this.button.x = this.width * 0.5;
    this.button.y = this.height * 0.5;
    this.addChild(this.button);
};


// ========================= Prototype =========================
MaserUI.Button.prototype = Object.create(MaserUI.Panel.prototype);
MaserUI.Button.prototype.constructor = MaserUI.Button;

// ========================= Update =========================
/**
 * Automatically called by World.update
 */
MaserUI.Button.prototype.update = function () {
    "use strict";
};

// ========================= Labels =========================
MaserUI.Button.prototype.addLabel = function (game, settings, text, style) {
    "use strict";
    this.label = new MaserUI.TextBlock(game, settings, text, style);
    this.label.setAlignment([MaserUI.Panel.Alignment.center]);
    this.label.setPivot(new Phaser.Point(0.5, 0.5));
    this.label.Stretch = MaserUI.Panel.StretchOptions.uniform;
    this.label.inputEnabled = false;
    this.addChild(this.label);
};
MaserUI.Button.prototype.setText = function (text) {
    "use strict";
    if (this.label !== undefined) {
        this.label.setText(text);
    }
};
MaserUI.Button.prototype.setStyle = function (style) {
    "use strict";
    if (this.label !== undefined) {
        this.label.setStyle(style);
    }
};


// ========================= Methods =========================
MaserUI.Button.prototype.flipHorizontal = function () {
    "use strict";
    this.button.scale.x = -1;
};
MaserUI.Button.prototype.flipVertical = function () {
    "use strict";
    this.button.scale.y = -1;
};
// ========================= Construction =========================
MaserUI.ToggleButton = function (game, isToggledOn) {
    "use strict";
    MaserUI.Panel.call(this, game, {width:102, height:63, relativeSize:[0.2,0], stretch:MaserUI.Panel.StretchOptions.uniform});

    // Add backing
    this.backing = new Phaser.Sprite(game, 0, 0, "gameAtlas", "toggle_off.png");
    this.backing.anchor.setTo(0.5, 0.5);
    this.addChild(this.backing);

    // Add fill
    this.fill = new Phaser.Sprite(game, 0, 0, "gameAtlas", "toggle_on.png");
    this.fill.anchor.setTo(0.5, 0.5);
    this.addChild(this.fill);

    // Add button
    this.switch = new Phaser.Sprite(game, 0, 0, "gameAtlas", "toggle_switch.png");
    this.switch.anchor.setTo(0.5, 0.5);
    this.switch.scale.x = this.switch.scale.y = 1;
    this.addChild(this.switch);

    // Initialize state
    this.setState(isToggledOn);
};
// ========================= Prototype =========================
MaserUI.ToggleButton.prototype = Object.create(MaserUI.Panel.prototype);
MaserUI.ToggleButton.prototype.constructor = MaserUI.ToggleButton;

// ========================= Methods =========================
MaserUI.ToggleButton.prototype.setState = function (isToggledOn) {
    "use strict";
    this.isToggledOn = isToggledOn;
    if (this.isToggledOn) {
        this.fill.scale.x = this.fill.scale.y = 1;
        this.switch.x = this.backing.width * 0.23;
    }
    else {
        this.fill.scale.x = this.fill.scale.y = 0;
        this.switch.x = this.backing.width * -0.23;
    }
};

MaserUI.ToggleButton.prototype.toggle = function () {
    "use strict";
    if (this.isToggledOn) {
        this.toggleOff();
    }
    else {
        this.toggleOn();
    }
};

MaserUI.ToggleButton.prototype.toggleOn = function () {
    "use strict";
    // Change state
    this.isToggledOn = true;

    // Animate fill
    var fillTween = this.game.add.tween(this.fill.scale);
    fillTween.to({x:1, y:1}, 0.16 * 1000, Phaser.Easing.Cubic.Out);
    fillTween.start();

    // Animate switch
    var switchTween = this.game.add.tween(this.switch);
    switchTween.to({x:this.backing.width * 0.23}, 0.08 * 1000, Phaser.Easing.Cubic.Out);
    switchTween.start();
};

MaserUI.ToggleButton.prototype.toggleOff = function () {
    "use strict";
    // Change state
    this.isToggledOn = false;

    // Animate fill
    var fillTween = this.game.add.tween(this.fill.scale);
    fillTween.to({x:0, y:0}, 0.16 * 1000, Phaser.Easing.Cubic.Out);
    fillTween.start();

    // Animate switch
    var switchTween = this.game.add.tween(this.switch);
    switchTween.to({x:this.backing.width * -0.23}, 0.08 * 1000, Phaser.Easing.Cubic.Out);
    switchTween.start();
};
/**
 * Slider that can be used as a scroll control
 * @param game
 * @param width
 * @param height
 * @param sliderBackImage key of image of slider background
 * @param sliderImage key of image of slider controller
 * @constructor
 */
MaserUI.Slider = function (game, settings, atlas, sliderBackImage, sliderImage) {
    "use strict";
    this.game = game;
    MaserUI.Panel.call(this, game, settings);
    this.sliderImage = new Phaser.Image(this.game, settings.width/2, 0, atlas, sliderImage);
    this.sliderImage.anchor = new Phaser.Point(0.5,0.5);

    this.sliderBackImage = new Phaser.Image(this.game, settings.width/2, 0, atlas, sliderBackImage);
    this.sliderBackImage.anchor = new Phaser.Point(0.5,0);
    this.sliderBackImage.height = settings.height;
    this.valueChanged = new Phaser.Signal();

    this.addChild(this.sliderBackImage);
    this.addChild(this.sliderImage);

    this.inputEnabled = true;
    this.events.onInputUp.add(this.onSliderbackgroundClick, this);

    this.sliderImage.inputEnabled = true;
    this.sliderImage.input.priorityID = 1;
    this.sliderImage.events.onInputDown.add(this.onSlideStart, this);
    this.game.input.onUp.add(this.onSlideEnd, this);

};
MaserUI.Slider.prototype = Object.create(MaserUI.Panel.prototype);
MaserUI.Slider.prototype.constructor = MaserUI.Slider;
MaserUI.Slider.prototype.onSliderbackgroundClick = function () {
    "use strict";
    this.sliderImage.y = this.toLocal(new Phaser.Point(this.game.input.activePointer.worldX, this.game.input.activePointer.worldY)).y;
    var value = this.sliderImage.y / (this.height);
    value = Phaser.Math.roundTo(value, -2);
    value = Phaser.Math.clamp(value, 0, 1);
    this.valueChanged.dispatch(value);
};
MaserUI.Slider.prototype.onSlideStart = function () {
    "use strict";
    this.slide = true;
};
MaserUI.Slider.prototype.onSlideEnd = function () {
    "use strict";
    this.slide = false;
};

MaserUI.Slider.prototype.update = function () {
    "use strict";

    var activePointer = this.game.input.activePointer;
    if (activePointer.isDown && this.slide === true) {
        var y = this.toLocal(new Phaser.Point(activePointer.worldX, activePointer.worldY)).y;
        this.sliderImage.y = y;
    }

    if (this.sliderImage.y <= this.sliderImage.height/2) {
        this.sliderImage.y = this.sliderImage.height/2;
    }
    if (this.sliderImage.y > this.getLocalBounds().height - this.sliderImage.height/2) {
        this.sliderImage.y = this.getLocalBounds().height-this.sliderImage.height/2;
    }

    if (this.slide) {
        var value = (this.sliderImage.y - this.sliderImage.height/2) / (this.getLocalBounds().height - this.sliderImage.height);
        value = Phaser.Math.roundTo(value, -2);
        value = Phaser.Math.clamp(value, 0, 1);
        //this.game.debug.text("value: " + value, 100, 430);
        this.valueChanged.dispatch(value);
    }
    //this.game.debug.spriteInfo(this, 32, 180);
    ////this.game.debug.inputInfo(32, 32);
    //this.game.debug.spriteInputInfo(this, 32, 130);
    //this.game.debug.pointer(activePointer);
    //this.game.debug.spriteBounds(this);
    //this.game.debug.text(this.toLocal(new Phaser.Point(activePointer.worldX, activePointer.worldY)), 100, 380);
   // this.game.debug.text(this.getLocalBounds(), 100, 400);
    //if(this.slide){
    //  if(this.sliderImage.position.y + this.sliderImage.height*0.5 < 0) {
    //      this.sliderImage.position.y = - this.sliderImage.height*0.5 ;
    //      return;
    //  }
    //  if(this.sliderImage.position.y + this.sliderImage.height*0.5 > this.sliderBackImage.height )
    //  {
    //      this.sliderImage.position.y = this.sliderBackImage.height - this.sliderImage.height*0.5 ;
    //  }
    //}
};

// ========================= Construction =========================
MaserUI.StackPanel = function (game, settings) {
    "use strict";
    MaserUI.Panel.call(this, game, settings);
    this.items = [];
    this.startPosition = 0;
    this.totalHeight = 0;

    // Add mask
    var mask = new Phaser.Graphics(this.game, 0, 0);
    mask.beginFill(0xffffff);
    mask.drawRect(0, 0, settings.width, settings.height);
    this.addChild(mask);
    this.mask = mask;
};

MaserUI.StackPanel.prototype = Object.create(MaserUI.Panel.prototype);
MaserUI.StackPanel.prototype.constructor = MaserUI.StackPanel;


// ========================= Items =========================
MaserUI.StackPanel.prototype.addItem = function (item) {
    "use strict";
    this.items.push(item);
    this.addChild(item);
};

// ========================= Update =========================
MaserUI.StackPanel.prototype.update = function () {
    "use strict";
    //var activePointer = this.game.input.activePointer;
    //this.game.debug.spriteInfo(this, 32, 130);
    //this.game.debug.pointer(activePointer);
    //this.game.debug.spriteBounds(this);

    var start = this.startPosition;
    this.totalHeight = 0;
    for (var i = 0; i < this.items.length; i++) {
        var item = this.items[i];
        var topMargin = item.getMargin(MaserUI.Panel.Alignment.top) * item.height;
        var bottomMargin = item.getMargin(MaserUI.Panel.Alignment.bottom) * item.height;
        item.position.y = start + topMargin;

        //TODO:[tkachenko] hack should be fixed in panel transformation matrix
        var itemTotalHeight = (item.height + topMargin + bottomMargin);
        this.totalHeight += itemTotalHeight;
        start += itemTotalHeight;

        item.autoCull = true;
    }
    Panel.prototype.update.call(this);
};
MaserUI.ListBox = function (game, settings, atlas, sliderBackImage, sliderImage) {
    "use strict";
    MaserUI.StackPanel.call(this, game, settings);
    this.slider = new MaserUI.Slider(game, {width:settings.width * 0.2, height:settings.height},atlas, sliderBackImage, sliderImage);
    this.slider.setAlignment([MaserUI.Panel.Alignment.right,MaserUI.Panel.Alignment.top]);
    this.slider.setPivot(new Phaser.Point(1, 0));
    this.slider.setRelativeSize(0.2, 0.99);
    this.slider.restrictWidthStretching = true;
    this.addChild(this.slider);
    this.slider.valueChanged.add(this.onScroll, this);
};
MaserUI.ListBox.prototype = Object.create(MaserUI.StackPanel.prototype);
MaserUI.ListBox.prototype.constructor = MaserUI.ListBox;
MaserUI.ListBox.prototype.onScroll = function (value) {
    "use strict";
    var nextPosition = (this.totalHeight - this.height/this.scale.y) * value;

    if (this.height/this.scale.y <= (this.totalHeight - nextPosition)) {
        this.startPosition = -nextPosition;
    }
};

/**
 * Bring slider element to the top of the display
 */
MaserUI.ListBox.prototype.bringSliderToTop = function () {
    "use strict";
    if (this.slider !== null) {
        this.addChild(this.slider);
    }
};
    module.exports = MaserUI;
}).call(this);

},{}],"d:\\GIT\\MaserUI\\samples\\demoProject\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {
};

Boot.prototype = {

    preload: function () {
        "use strict";
        console.log("boot started");
    },

    create: function () {
        "use strict";
        this.game.scale.scaleMode = Phaser.ScaleManager.RESIZE;
        this.game.scale.pageAlignHorizontally = true;
        this.game.scale.pageAlignVertically = true;
        this.game.state.start('Demo');
    }
};

module.exports = Boot;

},{}],"d:\\GIT\\MaserUI\\samples\\demoProject\\src\\js\\states\\demo.js":[function(require,module,exports){
var MaserUI = require("../../../../../build/maserUI");
var Panel = MaserUI.Panel;
var Demo = function () {
    "use strict";
};
module.exports = Demo;

// ========================= Prototype =========================
Demo.prototype = {

    // region ========================= Creation =========================
    create: function () {
        "use strict";
        this.panelsDemo();
    },
    panelsDemo: function () {
        "use strict";
        var rootPanel = new Panel(this.game, {
            backColor:"#FF0000",
            alignment:[Panel.Alignment.center],
            pivot:[0.5,0.5],
            relativeSize:[0.5,0.5]
        });
        rootPanel.scale.x = 0.5;
        rootPanel.scale.y = 0.5;

        var panel = new Panel(this.game, {
            width:50,
            height:50,
            backColor:"00FF00",
            alignment:[Panel.Alignment.left],
            pivot:[0,0.5]
        });
        rootPanel.addChild(panel);

        var panel = new Panel(this.game, {
            width:50,
            height:50,
            backColor:"#00FF00",
            alignment:[Panel.Alignment.right],
            pivot:[1,0.5]
        });
        rootPanel.addChild(panel);

        var panel = new Panel(this.game, {
            width:50,
            height:50,
            backColor:"#00FF00",
            alignment:[Panel.Alignment.top],
            pivot:[0.5,0]
        });
        rootPanel.addChild(panel);

        var panel = new Panel(this.game, {
            width:50,
            height:50,
            backColor:"#00FF00",
            alignment:[Panel.Alignment.bottom],
            pivot:[0.5,1]
        });
        rootPanel.addChild(panel);

        var panel1 = new Panel(this.game, {
            width:50,
            height:50,
            backColor:"#0000FF",
            alignment:[Panel.Alignment.center],
            pivot:[0.5,0.5]
        });
        rootPanel.addChild(panel1);
        var centerBottom = new Panel(this.game, {
            width:50,
            height:50,
            backColor:"#00FFFF",
            pivot:[0.5,0.5],
            alignment:[Panel.Alignment.center]

        });
        centerBottom.setLinkedAnchors(undefined,panel1,undefined,panel);
        rootPanel.addChild(centerBottom);

        var panel1 = new Panel(this.game, {
            width:20,
            height:20,
            backColor:"#FFFFFF",
            alignment:[Panel.Alignment.center],
            pivot:[0.5,0.5]
        });
        panel.addChild(panel1);

        var leftTop = new Panel(this.game, {
            backColor:"#FFFF00",
            alignment:[Panel.Alignment.top, Panel.Alignment.left],
            relativeSize:[0.1,0.1]
        });
        this.game.add.existing(leftTop);

        var rightTop = new Panel(this.game, {
            backColor:"#FFFF00",
            alignment:[ Panel.Alignment.right, Panel.Alignment.top],
            pivot:[1, 0],
            relativeSize:[0.1, 0.1]
        });
        this.game.add.existing(rightTop);

        var leftBottom = new Panel(this.game, {
            backColor:"#FFFF00",
            alignment:[Panel.Alignment.bottom, Panel.Alignment.left],
            pivot:[0,1],
            relativeSize:[0.1,0.1]
        });
        this.game.add.existing(leftBottom);

        var rightBottom = new Panel(this.game, {
            backColor:"#FFFF00",
            alignment:[Panel.Alignment.bottom, Panel.Alignment.right],
            pivot:[1,1],
            relativeSize:[0.1,0.1]
        });
        this.game.add.existing(rightBottom);

        var bottomPanel = new Panel(this.game, {
            width:300,
            height:50,
            backColor:"#00FFFF",
            pivot:[0.5,1]
        });
        bottomPanel.setLinkedAnchors(leftBottom,undefined,rightBottom);
        this.game.add.existing(bottomPanel);

        var leftPanel = new Panel(this.game, {
            width:300,
            height:50,
            backColor:"#00FFFF",
            pivot:[0,0]

        });
        leftPanel.setLinkedAnchors(undefined,leftTop,undefined,leftBottom);
        this.game.add.existing(leftPanel);

        this.game.add.existing(rootPanel);
    }

    // endregion


};

},{"../../../../../build/maserUI":"d:\\GIT\\MaserUI\\build\\maserUI.js"}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwic3JjL2pzL21haW4uanMiLCIuLi8uLi9idWlsZC9tYXNlclVJLmpzIiwic3JjL2pzL3N0YXRlcy9ib290LmpzIiwic3JjL2pzL3N0YXRlcy9kZW1vLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzc4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSgxNjAwLCAxMjAwLCBQaGFzZXIuQVVUTywgJ0RlbW8nKTsgXHJcblxyXG5nYW1lLnN0YXRlLmFkZCgnQm9vdCcsIHJlcXVpcmUoJy4vc3RhdGVzL2Jvb3QnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdEZW1vJywgcmVxdWlyZSgnLi9zdGF0ZXMvZGVtbycpKTtcclxuXHJcbmdhbWUuc3RhdGUuc3RhcnQoJ0Jvb3QnKTsiLCIoZnVuY3Rpb24oKXtcclxuXHJcbi8qKlxyXG4gKiBAbmFtZXNwYWNlIE1hc2VyVUlcclxuICovXHJcbnZhciBNYXNlclVJID0gTWFzZXJVSSB8fCB7XHJcbiAgICAgICAgVkVSU0lPTjogMC4xXHJcbiAgICB9O1xyXG4vKipcclxuICogQGNsYXNzIFBhbmVsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZXh0ZW5kcyBQaGFzZXIuSW1hZ2VcclxuICogQHBhcmFtIHtQaGFzZXIuR2FtZX0gZ2FtZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50bHkgcnVubmluZyBnYW1lLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gW3NldHRpbmdzXSAtIHNldHRpbmdzIGZvciB1aSBwYW5lbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NldHRpbmdzLmJhY2tBdGxhc10gLSBpZiB5b3Ugd2FudCB0byBzZXQgYmFja2dyb3VuZCBpbWFnZSwgeW91IHNob3VsZCBzZXQgYXRsYXMgYW5kIGJhY2sgaW1xZ2VcclxuICogQHBhcmFtIHtzdHJpbmd9IFtzZXR0aW5ncy5iYWNrSW1hZ2VdIC0gaWYgeW91IHdhbnQgdG8gc2V0IGJhY2tncm91bmQgaW1hZ2UsIHlvdSBzaG91bGQgc2V0IGF0bGFzIGFuZCBiYWNrIGltcWdlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2V0dGluZ3MuYmFja0NvbG9yXSAtIGlmIHlvdSB3YW50IHRvIGhhdmUgc29saWQgYmFja2dyb3VuZCBjb2xvciwgc2V0IHRoaXMgdG8gXCIjRkZGRkZGXCIgY29sb3IgZm9ybWF0LCBpZiB5b3Ugd2lsbCBsZWF2ZSB0aGlzIGVtcHR5IGFzIHdlbGwgYXMgaW1hZ2VzIHBhbmVsIHdpbGwgYmUgdHJhbnNwYXJlbnRcclxuICogQHBhcmFtIHtudW1iZXJ9IFtzZXR0aW5ncy53aWR0aF0gLSBhYnNvbHV0ZSB3aWR0aFxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3NldHRpbmdzLmhlaWdodF0gLSBhYnNvbHV0ZSBoZWlnaHRcclxuICogQHBhcmFtIHtudW1iZXJbXX0gW3NldHRpbmdzLnJlbGF0aXZlU2l6ZV0gLSBhcnJheSBvZiB0d28gbnVtYmVycyBmcm9tIDAgdG8gMSwgZm9yIHdpZHRoIGFuZCBoZWlnaHQgYWNjb3JkaW5nbHksIGZvciBleGFtcGxlIFswLjUsMC41XSBpZiBvbmUgb2YgdGhlbSAwIHRoYW4gdGhhbiBhYnNvbHV0ZSBzaXplIHdpbGwgYmUgdXNlZCBpbnN0ZWFkXHJcbiAqIEBwYXJhbSB7UGFuZWwuQWxpZ25tZW50W119IFtzZXR0aW5ncy5hbGlnbm1lbnRdIC0gYXJyYXkgb2YgYWxpZ25tZW50cyB0aGF0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIG9iamVjdFxyXG4gKiBAcGFyYW0ge251bWJlcltdfSBbc2V0dGluZ3MuaGVpZ2h0Qm91bmRzXSAtIGFycmF5IG9mIGhlaWdodCBib3VuZHMgW21pbixtYXhdIDAgLSBtZWFucyB0aGF0IHRoZXJlIG5vIGJvdW5kXHJcbiAqIEBwYXJhbSB7bnVtYmVyW119IFtzZXR0aW5ncy53aWR0aEJvdW5kc10gLSBhcnJheSBvZiB3aWR0aCBib3VuZHMgW21pbixtYXhdIDAgLSBtZWFucyB0aGF0IHRoZXJlIG5vIGJvdW5kXHJcbiAqIEBwYXJhbSB7UGFuZWwuU3RyZXRjaE9wdGlvbnN9IFtzZXR0aW5ncy5zdHJldGNoXSBzdHJldGNoaW5nIG9wdGlvbiAoZmlsbCx1bmlmb3JtIGV0Yy4uKVxyXG4gKiBAcGFyYW0ge251bWJlcltdfSBbc2V0dGluZ3MucGl2b3RdIHBpdm90IHBvaW50LCBhcnJheSBjb250YWlucyB0d28gbnVtYmVycyBmb3Igd2lkdGggYW5kIGhlaWdodCwgZnJvbSAwIHRvIDEsIGZvciBleGFtcGxlIFsxLDFdXHJcbiAqIEBwYXJhbSB7bnVtYmVyW119IFtzZXR0aW5ncy5tYXJnaW5zXSBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b21cclxuICovXHJcbk1hc2VyVUkuUGFuZWwgPSBmdW5jdGlvbiAoZ2FtZSwgc2V0dGluZ3MpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSB7fTtcclxuICAgIHRoaXMuYXNzaWduU2V0dGluZ3Moc2V0dGluZ3MpO1xyXG5cclxuICAgIC8vIFNldCBkZWZhdWx0IGltYWdlIHRvIGEgdGV4dHVyZVxyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuYmFja0F0bGFzICYmIHRoaXMuc2V0dGluZ3MuYmFja0ltYWdlKSB7XHJcbiAgICAgICAgUGhhc2VyLkltYWdlLmNhbGwodGhpcywgdGhpcy5nYW1lLCAwLCAwLCB0aGlzLnNldHRpbmdzLmJhY2tBdGxhcywgdGhpcy5zZXR0aW5ncy5iYWNrSW1hZ2UpO1xyXG4gICAgICAgIC8vIElmIHdlIGxvYWRlZCBhbiBpbWFnZSBhbmQgd2UgYXJlIG5vdCBvdmVycmlkaW5nIHRoZSBkaW1lbnNpb25zLCB0aGVuIHNldCB0aGUgb3JpZ2luYWwgc2l6ZSB0byB0aGUgaW1hZ2UncyBzaXplXHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLndpZHRoICYmICF0aGlzLnNldHRpbmdzLmhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLm9yaWdpbmFsU2l6ZS54ID0gdGhpcy53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5vcmlnaW5hbFNpemUueSA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIE9yIGRyYXcgYSBjb2xvcmVkIHJlY3RhbmdsZSB0byByZXByZXNlbnQgdGhpcyBwYW5lbFxyXG4gICAgZWxzZSBpZiAodGhpcy5zZXR0aW5ncy5iYWNrQ29sb3IgIT09IG51bGwgJiYgdGhpcy5zZXR0aW5ncy5iYWNrQ29sb3IgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuc2V0QmFja0NvbG9yLmNhbGwodGhpcywgdGhpcy5zZXR0aW5ncy53aWR0aCwgdGhpcy5zZXR0aW5ncy5oZWlnaHQsIHRoaXMuc2V0dGluZ3MuYmFja0NvbG9yKTtcclxuICAgICAgICBQaGFzZXIuSW1hZ2UuY2FsbCh0aGlzLCBnYW1lLCAwLCAwLCB0aGlzLmJhY2tDb2xvcik7XHJcbiAgICB9XHJcbiAgICAvLyBJZiBubyBpbWFnZSBzZXR0aW5ncyB3ZXJlIHBhc3NlZCwgdGhlbiBkcmF3IGEgeWVsbG93IHJlY3RhbmdsZVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zZXRCYWNrQ29sb3IuY2FsbCh0aGlzLCB0aGlzLnNldHRpbmdzLndpZHRoLCB0aGlzLnNldHRpbmdzLmhlaWdodCwgXCIweGZmZjAwMFwiLCAwKTtcclxuICAgICAgICBQaGFzZXIuSW1hZ2UuY2FsbCh0aGlzLCBnYW1lLCAwLCAwLCB0aGlzLmJhY2tDb2xvcik7XHJcbiAgICB9XHJcbn07XHJcblxyXG5NYXNlclVJLlBhbmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLkltYWdlLnByb3RvdHlwZSk7XHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFzZXJVSS5QYW5lbDtcclxuXHJcbi8qKlxyXG4gKiBQYW5lbC5BbGlnbm1lbnQgYXJyYXkgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgYW5jaG9yXHJcbiAqIEB0eXBlIHsqW119XHJcbiAqL1xyXG5NYXNlclVJLlBhbmVsLnByb3RvdHlwZS5hbGlnbm1lbnQgPSBcImZyZWVcIjtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gU2V0dGluZ3MgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vKipcclxuICogQG1ldGhvZCBNYXNlclVJLlBhbmVsI2Fzc2lnblNldHRpbmdzXHJcbiAqIEBtZW1iZXJvZiBNYXNlclVJLlBhbmVsXHJcbiAqIEBwYXJhbSBzZXR0aW5nc1xyXG4gKi9cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuYXNzaWduU2V0dGluZ3MgPSBmdW5jdGlvbihzZXR0aW5ncyl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIGlmKHRoaXMuc2V0dGluZ3MgPT0gbnVsbCkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0ge307XHJcbiAgICB9XHJcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5zZXR0aW5ncztcclxuICAgIGlmICghcmVzdWx0LmFsaWdubWVudCkgeyByZXN1bHQuYWxpZ25tZW50ID0gW01hc2VyVUkuUGFuZWwuQWxpZ25tZW50LmZyZWVdOyB9XHJcbiAgICBpZiAoIXJlc3VsdC5tYXJnaW5zKSB7IHJlc3VsdC5tYXJnaW5zID0gWzAsIDAsIDAsIDBdOyB9XHJcbiAgICBpZiAoIXJlc3VsdC5yZXN0cmljdFdpZHRoU3RyZXRjaGluZykgeyByZXN1bHQucmVzdHJpY3RXaWR0aFN0cmV0Y2hpbmcgPSBmYWxzZTsgfVxyXG4gICAgaWYgKCFyZXN1bHQucmVzdHJpY3RIZWlnaHRTdHJldGNoaW5nKSB7IHJlc3VsdC5yZXN0cmljdEhlaWdodFN0cmV0Y2hpbmcgPSBmYWxzZTsgfVxyXG4gICAgaWYgKCFyZXN1bHQuc3RyZXRjaCkgeyByZXN1bHQuc3RyZXRjaCA9IE1hc2VyVUkuUGFuZWwuU3RyZXRjaE9wdGlvbnMubm9uZTsgfVxyXG4gICAgaWYgKCFyZXN1bHQud2lkdGhCb3VuZHMpIHsgcmVzdWx0LndpZHRoQm91bmRzID0gW107IH1cclxuICAgIGlmICghcmVzdWx0LmhlaWdodEJvdW5kcykgeyByZXN1bHQuaGVpZ2h0Qm91bmRzID0gW107IH1cclxuXHJcbiAgICAvLyBQb2ludHNcclxuICAgIGlmICghcmVzdWx0Lm9mZnNldCkgeyByZXN1bHQub2Zmc2V0ID0gbmV3IFBoYXNlci5Qb2ludCgwLCAwKTsgfVxyXG4gICAgZWxzZSB7IHJlc3VsdC5vZmZzZXQgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdC5vZmZzZXRbMF0sIHJlc3VsdC5vZmZzZXRbMV0pOyB9XHJcbiAgICBpZiAoIXJlc3VsdC5waXZvdCkgeyByZXN1bHQucGl2b3QgPSBuZXcgUGhhc2VyLlBvaW50KDAsMCk7IH1cclxuICAgIGVsc2UgeyByZXN1bHQucGl2b3QgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdC5waXZvdFswXSxyZXN1bHQucGl2b3RbMV0pOyB9XHJcbiAgICBpZiAoIXJlc3VsdC53aWR0aCAmJiAhcmVzdWx0LmhlaWdodCkgeyByZXN1bHQub3JpZ2luYWxTaXplID0gbmV3IFBoYXNlci5Qb2ludCgxLCAxKTsgfVxyXG4gICAgZWxzZSB7IHJlc3VsdC5vcmlnaW5hbFNpemUgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdC53aWR0aCwgcmVzdWx0LmhlaWdodCk7IH1cclxuICAgIGlmICghcmVzdWx0LnJlbGF0aXZlU2l6ZSkgeyByZXN1bHQucmVsYXRpdmVTaXplID0gbmV3IFBoYXNlci5Qb2ludCgwLCAwKTsgfVxyXG4gICAgZWxzZSB7IHJlc3VsdC5yZWxhdGl2ZVNpemUgPSBuZXcgUGhhc2VyLlBvaW50KHJlc3VsdC5yZWxhdGl2ZVNpemVbMF0sIHJlc3VsdC5yZWxhdGl2ZVNpemVbMV0pOyB9XHJcbn07XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBQcm9wZXJ0aWVzID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLyoqXHJcbiAqIEFsaWdubWVudCBhcnJheSB0aGF0IGNvbnRhaW5zIHZhbHVlcyBmb3IgY3VycmVudCBwYW5lbCAodG9wLGJvdHRvbSxsZWZ0LHJpZ2h0KVxyXG4gKiB3aGljaCB3aWxsIGJlIHVzZSB0byBzZXQgdGhlIGFuY2hvciBwb3NpdGlvbiBmb3IgdGhlIHBhbmVsXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUsIFwiQWxpZ25tZW50XCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmFsaWdubWVudDtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHRoaXMuc2V0QWxpZ25tZW50KHZhbHVlKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUsIFwiT2Zmc2V0XCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLm9mZnNldDtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHRoaXMuc2V0T2Zmc2V0KHZhbHVlKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUsIFwiT3JpZ2luYWxTaXplXCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLm9yaWdpbmFsU2l6ZTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Mub3JpZ2luYWxTaXplID0gdmFsdWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2VyVUkuUGFuZWwucHJvdG90eXBlLCBcIlBhcmVudFdpZHRoXCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC53aWR0aDtcclxuICAgIH1cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUsIFwiUGFyZW50SGVpZ2h0XCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5oZWlnaHQ7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFNpemUgcmVsYXRpdmUgdG8gcGFyZW50IGNvbnRhaW5lciwgc2V0IFBoYXNlci5Qb2ludCB3aXRoIHZhbHVlcyBmcm9tIFswLDBdIHRvIFswLDFdXHJcbiAqIGlmIHNldCBcInVuZGVmaW5lZFwiIHdpbGwgdXNlIGFic29sdXRlIHNpemUsXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUsIFwiUmVsYXRpdmVTaXplXCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlbGF0aXZlU2l6ZTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplID0gdmFsdWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2VyVUkuUGFuZWwucHJvdG90eXBlLCBcIlJlc3RyaWN0SGVpZ2h0U3RyZXRjaGluZ1wiLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5yZXN0cmljdEhlaWdodFN0cmV0Y2hpbmc7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICB0aGlzLnNldHRpbmdzLnJlc3RyaWN0SGVpZ2h0U3RyZXRjaGluZyA9IHZhbHVlO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXNlclVJLlBhbmVsLnByb3RvdHlwZSwgXCJSZXN0cmljdFdpZHRoU3RyZXRjaGluZ1wiLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5yZXN0cmljdFdpZHRoU3RyZXRjaGluZztcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MucmVzdHJpY3RXaWR0aFN0cmV0Y2hpbmcgPSB2YWx1ZTtcclxuICAgIH1cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUsIFwiU3RyZXRjaFwiLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5zdHJldGNoO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5zdHJldGNoID0gdmFsdWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gR2V0dGVycyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLmdldE1hcmdpbiA9IGZ1bmN0aW9uIChhbGlnbm1lbnQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgc3dpdGNoKGFsaWdubWVudCkge1xyXG4gICAgICAgIGNhc2UgTWFzZXJVSS5QYW5lbC5BbGlnbm1lbnQubGVmdDogcmV0dXJuIHRoaXMuc2V0dGluZ3MubWFyZ2luc1swXTtcclxuICAgICAgICBjYXNlIE1hc2VyVUkuUGFuZWwuQWxpZ25tZW50LnRvcDogcmV0dXJuIHRoaXMuc2V0dGluZ3MubWFyZ2luc1sxXTtcclxuICAgICAgICBjYXNlIE1hc2VyVUkuUGFuZWwuQWxpZ25tZW50LnJpZ2h0OiByZXR1cm4gdGhpcy5zZXR0aW5ncy5tYXJnaW5zWzJdO1xyXG4gICAgICAgIGNhc2UgTWFzZXJVSS5QYW5lbC5BbGlnbm1lbnQuYm90dG9tOiByZXR1cm4gdGhpcy5zZXR0aW5ncy5tYXJnaW5zWzNdO1xyXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAwO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBTZXR0ZXJzID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLyoqXHJcbiAqIEFycmF5IHRoYXQgY29udGFpbnMgUGFuZWwuQWxpZ25tZW50IHNldHRpbmdzXHJcbiAqIEBwYXJhbSBhbGlnbm1lbnRBcnJheVxyXG4gKi9cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuc2V0QWxpZ25tZW50ID0gZnVuY3Rpb24gKGFsaWdubWVudEFycmF5KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMuc2V0dGluZ3MuYWxpZ25tZW50ID0gYWxpZ25tZW50QXJyYXk7XHJcbn07XHJcblxyXG4vKipcclxuKiBbcHJpdmF0ZV0gc2V0cyB0aGUgYmFjayBjb2xvciBvZiB0aGUgcGFuZWwgaWYgdGhlcmUgbm8gYmFjayBjb2xvciB0aGVuIHRyYW5zcGFyZW50XHJcbiogQHBhcmFtIHdpZHRoXHJcbiogQHBhcmFtIGhlaWdodFxyXG4qIEBwYXJhbSBiYWNrQ29sb3JcclxuKi9cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuc2V0QmFja0NvbG9yID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGJhY2tDb2xvciwgYWxwaGEpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdGhpcy5iYWNrQ29sb3IgPSB0aGlzLmdhbWUubWFrZS5iaXRtYXBEYXRhKHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgIGlmICghYmFja0NvbG9yKSB7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IHtcclxuICAgICAgICAgICAgYTogMCxcclxuICAgICAgICAgICAgYjogMCxcclxuICAgICAgICAgICAgcjogMCxcclxuICAgICAgICAgICAgZzogMFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmNvbG9yID0gUGhhc2VyLkNvbG9yLmhleFRvQ29sb3IoYmFja0NvbG9yKTtcclxuICAgICAgICBpZiAoYWxwaGEgPT09IG51bGwgfHwgYWxwaGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yLmEgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xvci5hID0gYWxwaGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5iYWNrQ29sb3IuZmlsbCh0aGlzLmNvbG9yLnIsIHRoaXMuY29sb3IuZywgdGhpcy5jb2xvci5iLCB0aGlzLmNvbG9yLmEpO1xyXG59O1xyXG5cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuc2V0QmFja0ltYWdlID0gZnVuY3Rpb24gKGJhY2tBdGxhcywgYmFja0ltYWdlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIC8vaWYodGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPT09IG51bGwgfHwgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAvLyAgICB0aGlzLmxvYWRUZXh0dXJlXHJcbiAgICB0aGlzLmxvYWRUZXh0dXJlKGJhY2tBdGxhcywgYmFja0ltYWdlKTtcclxuICAgIC8vUGhhc2VyLkltYWdlLmNhbGwodGhpcywgdGhpcy5nYW1lLCAwLCAwLCAgYmFja0F0bGFzLCBiYWNrSW1hZ2UpO1xyXG4gICAgLy99XHJcbiAgICAvL2Vsc2V7XHJcbiAgICAvL3RoaXMuYmFja2dyb3VuZEltYWdlLmxvYWRUZXh0dXJlKGJhY2tBdGxhcyxiYWNrSW1hZ2UpO1xyXG4gICAgLy99XHJcbn07XHJcblxyXG4vKipcclxuICogc2V0cyBoZWlnaHQgYm91bmRzLCBpZiBtaW4gPSAwIC0gdGhlcmUgbm93IG1pbiBib3VuZCAoYWJzb2x1dGUgb3IgcmVsYXRpdmUgc2l6ZSB3aWxsIGJlIHVzZWQgaW5zdGVhZCxcclxuICogaWYgbWF4ID09IDAgLSB0aGVyZSBubyBtYXggbGltaXRhdGlvbihhYnNvbHV0ZSBvciByZWxhdGl2ZSBzaXplIHdpbGwgYmUgdXNlZCBpbnN0ZWFkKVxyXG4gKiBAcGFyYW0gbWluXHJcbiAqIEBwYXJhbSBtYXhcclxuICovXHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLnNldEhlaWdodEJvdW5kcyA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLnNldHRpbmdzLmhlaWdodEJvdW5kcyA9IFttaW4sIG1heF07XHJcbn07XHJcblxyXG5NYXNlclVJLlBhbmVsLnByb3RvdHlwZS5zZXRMaW5rZWRBbmNob3JzID0gZnVuY3Rpb24gKGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLmxpbmtlZExlZnQgPSBsZWZ0O1xyXG4gICAgdGhpcy5saW5rZWRUb3AgPSB0b3A7XHJcbiAgICB0aGlzLmxpbmtlZFJpZ2h0ID0gcmlnaHQ7XHJcbiAgICB0aGlzLmxpbmtlZEJvdHRvbSA9IGJvdHRvbTtcclxufTtcclxuXHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLnNldE1hcmdpbnMgPSBmdW5jdGlvbiAobGVmdCwgdG9wLCByaWdodCwgYm90dG9tKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMuc2V0dGluZ3MubWFyZ2lucyA9IFtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b21dO1xyXG59O1xyXG5cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuc2V0T2Zmc2V0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLnNldHRpbmdzLm9mZnNldCA9IG9mZnNldDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHBpdm90IHBvaW50IG9mIHRoZSBwYW5lbCB2YWx1ZXMgZnJvbSBbMCwwXSB0byBbMSwxXVxyXG4gKiBAcGFyYW0gcGl2b3RQb2ludFxyXG4gKi9cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuc2V0UGl2b3QgPSBmdW5jdGlvbiAocGl2b3RQb2ludCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLnNldHRpbmdzLnBpdm90ID0gcGl2b3RQb2ludDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHJlbGF0aXZlIHNpemVcclxuICogQHBhcmFtIHdpZHRoXHJcbiAqIEBwYXJhbSBoZWlnaHRcclxuICovXHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLnNldFJlbGF0aXZlU2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplID0gbmV3IFBoYXNlci5Qb2ludCh3aWR0aCwgaGVpZ2h0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBzZXRzIHdpZHRoIGJvdW5kcywgaWYgbWluID0gMCAtIHRoZXJlIG5vdyBtaW4gYm91bmQgKGFic29sdXRlIG9yIHJlbGF0aXZlIHNpemUgd2lsbCBiZSB1c2VkIGluc3RlYWQsXHJcbiAqIGlmIG1heCA9PSAwIC0gdGhlcmUgbm8gbWF4IGxpbWl0YXRpb24oYWJzb2x1dGUgb3IgcmVsYXRpdmUgc2l6ZSB3aWxsIGJlIHVzZWQgaW5zdGVhZClcclxuICogQHBhcmFtIG1pblxyXG4gKiBAcGFyYW0gbWF4XHJcbiAqL1xyXG5NYXNlclVJLlBhbmVsLnByb3RvdHlwZS5zZXRXaWR0aEJvdW5kcyA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLnNldHRpbmdzLndpZHRoQm91bmRzID0gW21pbiwgbWF4XTtcclxufTtcclxuXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IENoZWNrcyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLmNoZWNrUGFuZWxCb3VuZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGlmICh0aGlzLndpZHRoIDwgdGhpcy5zZXR0aW5ncy53aWR0aEJvdW5kc1swXSAmJiB0aGlzLnNldHRpbmdzLndpZHRoQm91bmRzWzBdICE9PSAwKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuc2V0dGluZ3Mud2lkdGhCb3VuZHNbMF07XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy53aWR0aCA+IHRoaXMuc2V0dGluZ3Mud2lkdGhCb3VuZHNbMV0gJiYgdGhpcy5zZXR0aW5ncy53aWR0aEJvdW5kc1sxXSAhPT0gMCkge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnNldHRpbmdzLndpZHRoQm91bmRzWzFdO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaGVpZ2h0IDwgdGhpcy5zZXR0aW5ncy5oZWlnaHRCb3VuZHNbMF0gJiYgdGhpcy5zZXR0aW5ncy5oZWlnaHRCb3VuZHNbMF0gIT09IDApIHtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc2V0dGluZ3MuaGVpZ2h0Qm91bmRzWzBdO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaGVpZ2h0ID4gdGhpcy5zZXR0aW5ncy5oZWlnaHRCb3VuZHNbMV0gJiYgdGhpcy5zZXR0aW5ncy5oZWlnaHRCb3VuZHNbMV0gIT09IDApIHtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuc2V0dGluZ3MuaGVpZ2h0Qm91bmRzWzFdO1xyXG4gICAgfVxyXG59O1xyXG5cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuY2hlY2tMaW5rZWRBbmNob3JzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbn07XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBVcGRhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vKipcclxuICogV2hlbmV2ZXIgYSBwYW5lbCBhZGRzIGEgY2hpbGQsIGl0IHdpbGwgaW1tZWRpYXRlbHkgdXBkYXRlIHRoZSBjaGlsZCdzIHRyYW5zZm9ybSBhbmQgc2l6ZVxyXG4gKiBAcGFyYW0gY2hpbGRcclxuICovXHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIFBoYXNlci5JbWFnZS5wcm90b3R5cGUuYWRkQ2hpbGQuY2FsbCh0aGlzLCBjaGlsZCk7XHJcbiAgICAvL2lmICh0eXBlb2YgY2hpbGQudXBkYXRlVHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIC8vICAgIGNoaWxkLnVwZGF0ZVRyYW5zZm9ybSgpO1xyXG4gICAgLy99XHJcbn07XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFVwZGF0ZSA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbk1hc2VyVUkuUGFuZWwucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgLy90aGlzLnByb2Nlc3NTaXplKCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW5baV0udXBkYXRlKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5NYXNlclVJLlBhbmVsLnByb3RvdHlwZS51cGRhdGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGlmICghdGhpcy52aXNpYmxlKSB7IHJldHVybjsgfVxyXG4gICAgdGhpcy5kaXNwbGF5T2JqZWN0VXBkYXRlVHJhbnNmb3JtKCk7XHJcblxyXG4gICAgLy9QSVhJLkRpc3BsYXlPYmplY3QucHJvdG90eXBlLnVwZGF0ZVRyYW5zZm9ybS5jYWxsKCB0aGlzICk7XHJcbiAgICBpZiAodGhpcy5fY2FjaGVBc0JpdG1hcCkgeyByZXR1cm47IH1cclxuICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnVwZGF0ZVRyYW5zZm9ybSgpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUuZGlzcGxheU9iamVjdFVwZGF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8vdGhpcy5oZWlnaHQgPSB0aGlzLnBhcmVudC5oZWlnaHQ7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHNvbWUgbWF0cml4IHJlZnMgZm9yIGVhc3kgYWNjZXNzXHJcbiAgICB2YXIgcHQgPSB0aGlzLnBhcmVudC53b3JsZFRyYW5zZm9ybTtcclxuICAgIHZhciB3dCA9IHRoaXMud29ybGRUcmFuc2Zvcm07XHJcbiAgICAvLyBUZW1wb3JhcnkgbWF0cml4IHZhcmlhYmxlc1xyXG4gICAgdmFyIGEsIGIsIGMsIGQsIHR4LCB0eTtcclxuXHJcbiAgICAvLyBUaGlzIGdldHMgdGhlIHJlYWwgd2lkdGggb2YgcGFyZW50IGFuZCBjaGlsZFxyXG4gICAgdmFyIHdpZHRoID0gdGhpcy50ZXh0dXJlLmZyYW1lLndpZHRoO1xyXG4gICAgdmFyIGhlaWdodCA9IHRoaXMudGV4dHVyZS5mcmFtZS5oZWlnaHQ7XHJcbiAgICB2YXIgcGFyZW50V2lkdGggPSB0aGlzLnBhcmVudC53aWR0aDtcclxuICAgIHZhciBwYXJlbnRIZWlnaHQgPSB0aGlzLnBhcmVudC5oZWlnaHQ7XHJcbiAgICBpZiAodGhpcy5wYXJlbnQudGV4dHVyZSkge1xyXG4gICAgICAgIHBhcmVudFdpZHRoID0gdGhpcy5wYXJlbnQudGV4dHVyZS5mcmFtZS53aWR0aDtcclxuICAgICAgICBwYXJlbnRIZWlnaHQgPSB0aGlzLnBhcmVudC50ZXh0dXJlLmZyYW1lLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdzAgPSBwYXJlbnRXaWR0aCAqICgxIC0gdGhpcy5hbmNob3IueCk7XHJcbiAgICB2YXIgdzEgPSBwYXJlbnRXaWR0aCAqIC10aGlzLmFuY2hvci54O1xyXG5cclxuICAgIHZhciBoMCA9IHBhcmVudEhlaWdodCAqICgxIC0gdGhpcy5hbmNob3IueSk7XHJcbiAgICB2YXIgaDEgPSBwYXJlbnRIZWlnaHQgKiAtdGhpcy5hbmNob3IueTtcclxuXHJcbiAgICB2YXIgeDMgPSBwdC5hICogdzAgKyBwdC5jICogaDA7IC8vIHBhcmVudCB3aWR0aFxyXG4gICAgdmFyIHkzID0gcHQuZCAqIGgwICsgcHQuYiAqIHcwOyAvLyBwYXJlbnQgaGVpZ2h0XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyhcInZhbHVlc1wiLHcwLHcxLGgwLGgxLHgxLHkxLHgyLHkyLHgzLHkzLHg0LHk0LHRoaXMuc2NhbGUueCx0aGlzLnNjYWxlLnksdGhpcy5zZXR0aW5ncy5vcmlnaW5hbFNpemUueCx0aGlzLnNldHRpbmdzLm9yaWdpbmFsU2l6ZS55LHdpZHRoLGhlaWdodCx0aGlzLnNldHRpbmdzLnN0cmV0Y2gpO1xyXG4gICAgLy9JIGYgdGhlIHBhbmVsIGlzIHNldCB0byBhIHJlbGF0aXZlIHNpemUsIHRoaXMgaXMgd2hhdCB3aWxsIGhhcHBlblxyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplLnggIT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZS54ID0gKHgzICogdGhpcy5zZXR0aW5ncy5yZWxhdGl2ZVNpemUueCkgLyB3aWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplLnkgIT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZS55ID0gKHkzICogdGhpcy5zZXR0aW5ncy5yZWxhdGl2ZVNpemUueSkgLyBoZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMucmVzdHJpY3RXaWR0aFN0cmV0Y2hpbmcgJiYgdGhpcy5zY2FsZS54ID4gdGhpcy5zY2FsZS55KXtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZS54ID0gdGhpcy5zY2FsZS55O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLnJlc3RyaWN0SGVpZ2h0U3RyZXRjaGluZyl7Y29uc29sZS5sb2coXCJyZXN0clwiLHRoaXMucmVzdHJpY3RIZWlnaHRTdHJldGNoaW5nICAsdGhpcy5zY2FsZS55ICx0aGlzLnNjYWxlLngpO31cclxuICAgICAgICBpZih0aGlzLnJlc3RyaWN0SGVpZ2h0U3RyZXRjaGluZyAgJiYgdGhpcy5zY2FsZS55ID4gdGhpcy5zY2FsZS54KXtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZS55ID0gdGhpcy5zY2FsZS54O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBQYW5lbHMgY2FuJ3QgYmUgYm90aCByZWxhdGl2ZSBzaXplIGFuZCBzdHJldGNoaW5nLCBzbyBpZiB0aGlzIHdpbGwgb3ZlcnJpZGUgdGhlIHJlbGF0aXZlIHNpemUgaWYgaXQncyBzZXRcclxuICAgIC8vIEFkZCBzb21lIHNvcnQgb2Ygc2NhbGluZyBydWxlXHJcbiAgICB2YXIgc2NhbGU7XHJcbiAgICBzd2l0Y2ggKHRoaXMuc2V0dGluZ3Muc3RyZXRjaCkge1xyXG4gICAgICAgIGNhc2UgTWFzZXJVSS5QYW5lbC5TdHJldGNoT3B0aW9ucy5maWxsOlxyXG4gICAgICAgICAgICAvL3RoaXMuc2NhbGUueCA9IHB0LmE7XHJcbiAgICAgICAgICAgIC8vdGhpcy5zY2FsZS55ID0gcHQuZDtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHgzO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHkzO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBNYXNlclVJLlBhbmVsLlN0cmV0Y2hPcHRpb25zLnVuaWZvcm06XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnJlbGF0aXZlU2l6ZS54ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlLnggPSB0aGlzLnNjYWxlLnkgPSBNYXRoLm1pbih4MyAqIHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplLnggLyB0aGlzLnNldHRpbmdzLm9yaWdpbmFsU2l6ZS54LCB5MyAvIHRoaXMuc2V0dGluZ3Mub3JpZ2luYWxTaXplLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplLnkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUueCA9IHRoaXMuc2NhbGUueSA9IE1hdGgubWluKHgzIC8gdGhpcy5zZXR0aW5ncy5vcmlnaW5hbFNpemUueCwgeTMgKiB0aGlzLnNldHRpbmdzLnJlbGF0aXZlU2l6ZS55IC8gdGhpcy5zZXR0aW5ncy5vcmlnaW5hbFNpemUueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlLnggPSB0aGlzLnNjYWxlLnkgPSBNYXRoLm1pbih4MyAqIHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplLnggLyB0aGlzLnNldHRpbmdzLm9yaWdpbmFsU2l6ZS54LCB5MyAqIHRoaXMuc2V0dGluZ3MucmVsYXRpdmVTaXplLnkgLyB0aGlzLnNldHRpbmdzLm9yaWdpbmFsU2l6ZS55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBNYXNlclVJLlBhbmVsLlN0cmV0Y2hPcHRpb25zLnVuaWZvcm1Ub0ZpbGw6XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueCA9IDEgLyB0aGlzLnBhcmVudC5zY2FsZS54O1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlLnkgPSAxIC8gdGhpcy5wYXJlbnQuc2NhbGUueTtcclxuICAgICAgICAgICAgdmFyIHJhdGlvSCA9IHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgdmFyIHJhdGlvViA9IHRoaXMuaGVpZ2h0IC8gdGhpcy53aWR0aDtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50LndpZHRoID49IHRoaXMucGFyZW50LmhlaWdodCAmJiB0aGlzLndpZHRoICE9PSB0aGlzLnBhcmVudC53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuUGFyZW50V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuUGFyZW50V2lkdGggKiByYXRpb1Y7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucGFyZW50LndpZHRoIDwgdGhpcy5wYXJlbnQuaGVpZ2h0ICYmIHRoaXMuaGVpZ2h0ICE9PSB0aGlzLnBhcmVudC5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5QYXJlbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5QYXJlbnRIZWlnaHQgKiByYXRpb0g7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2hlY2tQYW5lbEJvdW5kcygpO1xyXG5cclxuICAgIC8vIGNhbGN1bGF0aW5nIGZpbmFsIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBiYXNlZCBvbiBhYm92ZSBzZXR0aW5nc1xyXG4gICAgYSA9IHRoaXMuc2NhbGUueDtcclxuICAgIGQgPSB0aGlzLnNjYWxlLnk7XHJcbiAgICB3dC5hID0gYSAqIHB0LmE7XHJcbiAgICB3dC5iID0gYSAqIHB0LmI7XHJcbiAgICB3dC5jID0gZCAqIHB0LmM7XHJcbiAgICB3dC5kID0gZCAqIHB0LmQ7XHJcblxyXG4gICAgdHggPSB0aGlzLnBvc2l0aW9uLnggLSB0aGlzLnNldHRpbmdzLnBpdm90LnggKiB3aWR0aCAqIGE7XHJcbiAgICB0eSA9IHRoaXMucG9zaXRpb24ueSAtIHRoaXMuc2V0dGluZ3MucGl2b3QueSAqIGhlaWdodCAqIGQ7XHJcblxyXG4gICAgdmFyIGd3dCA9IHRoaXMuZ2FtZS5zdGFnZS53b3JsZFRyYW5zZm9ybTtcclxuICAgIHd0LmEgPSBhICogZ3d0LmE7XHJcbiAgICB3dC5iID0gYSAqIGd3dC5iO1xyXG4gICAgd3QuYyA9IGQgKiBnd3QuYztcclxuICAgIHd0LmQgPSBkICogZ3d0LmQ7XHJcblxyXG4gICAgd3QudHggPSB0eCAqIHB0LmEgKyB0eSAqIHB0LmMgKyBwdC50eDtcclxuICAgIHd0LnR5ID0gdHggKiBwdC5iICsgdHkgKiBwdC5kICsgcHQudHk7XHJcblxyXG5cclxuICAgIC8vIEFuY2hvcmluZyBvbmNlIHRoZSBzY2FsZSBoYXMgYmVlbiBhcHBsaWVkXHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQuaW5kZXhPZihNYXNlclVJLlBhbmVsLkFsaWdubWVudC5mcmVlKSA8IDApIHtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQuaW5kZXhPZihNYXNlclVJLlBhbmVsLkFsaWdubWVudC5jZW50ZXIpID49IDApIHtcclxuICAgICAgICAgICAgd3QudHggPSB4MyAqIDAuNSArIHB0LnR4ICsgdHg7XHJcbiAgICAgICAgICAgIHd0LnR5ID0geTMgKiAwLjUgKyBwdC50eSArIHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQuaW5kZXhPZihNYXNlclVJLlBhbmVsLkFsaWdubWVudC50b3ApID49IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYWxpZ25tZW50Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgd3QudHggPSB4MyAqIDAuNSArIHB0LnR4ICsgdHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd3QudHkgPSBwdC50eSArIHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQuaW5kZXhPZihNYXNlclVJLlBhbmVsLkFsaWdubWVudC5ib3R0b20pID49IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYWxpZ25tZW50Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgd3QudHggPSB4MyAqIDAuNSArIHB0LnR4ICsgdHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd3QudHkgPSB5MyArIHB0LnR5ICsgdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmFsaWdubWVudC5pbmRleE9mKE1hc2VyVUkuUGFuZWwuQWxpZ25tZW50LmxlZnQpID49IDApIHtcclxuICAgICAgICAgICAgd3QudHggPSBwdC50eCArIHR4O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB3dC50eSA9IHkzICogMC41ICsgcHQudHkgKyB0eTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQuaW5kZXhPZihNYXNlclVJLlBhbmVsLkFsaWdubWVudC5yaWdodCkgPj0gMCkge1xyXG4gICAgICAgICAgICB3dC50eCA9IHgzICsgcHQudHggKyB0eDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYWxpZ25tZW50Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgd3QudHkgPSB5MyAqIDAuNSArIHB0LnR5ICsgdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGJvdW5kcztcclxuXHJcbiAgICBpZiAodGhpcy5saW5rZWRMZWZ0KSB7XHJcbiAgICAgICAgYm91bmRzID0gIHRoaXMubGlua2VkTGVmdC5nZXRCb3VuZHMoKTtcclxuICAgICAgICB2YXIgbHd0ID0gdGhpcy5saW5rZWRMZWZ0LndvcmxkVHJhbnNmb3JtO1xyXG4gICAgICAgIHd0LnR4ID0gbHd0LnR4ICsgYm91bmRzLndpZHRoO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubGlua2VkUmlnaHQpIHtcclxuICAgICAgICBib3VuZHMgPSAgdGhpcy5saW5rZWRSaWdodC5nZXRCb3VuZHMoKTtcclxuICAgICAgICBpZiggdGhpcy5zZXR0aW5ncy5hbGlnbm1lbnQuaW5kZXhPZihNYXNlclVJLlBhbmVsLkFsaWdubWVudC5yaWdodCkgPj0gMCkge1xyXG4gICAgICAgICAgICB2YXIgcnd0ID0gdGhpcy5saW5rZWRSaWdodC53b3JsZFRyYW5zZm9ybTtcclxuICAgICAgICAgICAgd3QudHggPSByd3QudHggLSB0aGlzLndpZHRoO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyd3QudHggLCBib3VuZHMueCAsIHRoaXMud2lkdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGJvdW5kcy54IC0gd3QudHg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubGlua2VkVG9wKSB7XHJcbiAgICAgICAgYm91bmRzID0gIHRoaXMubGlua2VkVG9wLmdldEJvdW5kcygpO1xyXG4gICAgICAgIHZhciB0d3QgPSB0aGlzLmxpbmtlZFRvcC53b3JsZFRyYW5zZm9ybTtcclxuICAgICAgICB3dC50eSA9IHR3dC50eSArIGJvdW5kcy5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5saW5rZWRCb3R0b20pIHtcclxuICAgICAgICBib3VuZHMgPSAgdGhpcy5saW5rZWRCb3R0b20uZ2V0Qm91bmRzKCk7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBib3VuZHMueSAtIHd0LnR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG11bHRpcGx5IHRoZSBhbHBoYXMuLlxyXG4gICAgdGhpcy53b3JsZEFscGhhID0gdGhpcy5hbHBoYSAqIHRoaXMucGFyZW50LndvcmxkQWxwaGE7XHJcbiAgICAvLyAgQ3VzdG9tIGNhbGxiYWNrP1xyXG4gICAgaWYgKHRoaXMudHJhbnNmb3JtQ2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbGxiYWNrLmNhbGwodGhpcy50cmFuc2Zvcm1DYWxsYmFja0NvbnRleHQsIHd0LCBwdCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBFbnVtcyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8qKlxyXG4gKiBzdHJldGNoaW5nIG9wdGlvbnNcclxuICogQHR5cGUge3tmaWxsOiBzdHJpbmcsIHVuaWZvcm06IHN0cmluZywgdW5pZm9ybVRvRmlsbDogc3RyaW5nfX1cclxuICovXHJcbk1hc2VyVUkuUGFuZWwuU3RyZXRjaE9wdGlvbnMgPSB7XHJcbiAgICBub25lOiBcIm5vbmVcIixcclxuICAgIGZpbGw6IFwiZmlsbFwiLCAvL2ZpbGwgYW5kIHNrZXdcclxuICAgIHVuaWZvcm06IFwidW5pZm9ybVwiLCAvL3VzZSBzbWFsbGVzdCB3aWR0aCBvciBoZWlnaHRcclxuICAgIHVuaWZvcm1Ub0ZpbGw6IFwidW5pZm9ybVRvRmlsbFwiIC8vIHVzZSBiaWdnZXN0IHdpZHRoIG9yIGhlaWdodFxyXG59O1xyXG5PYmplY3QuZnJlZXplKE1hc2VyVUkuUGFuZWwuU3RyZXRjaE9wdGlvbnMpO1xyXG5cclxuLyoqXHJcbiAqIGFsaWdubWVudCBvcHRpb25zXHJcbiAqIEB0eXBlIHt7ZnJlZTogc3RyaW5nLCB0b3A6IHN0cmluZywgbGVmdDogc3RyaW5nLCByaWdodDogc3RyaW5nLCBib3R0b206IHN0cmluZywgY2VudGVyOiBzdHJpbmd9fVxyXG4gKi9cclxuTWFzZXJVSS5QYW5lbC5BbGlnbm1lbnQgPSB7XHJcbiAgICBmcmVlOiBcImZyZWVcIixcclxuICAgIHRvcDogXCJ0b3BcIixcclxuICAgIGxlZnQ6IFwibGVmdFwiLFxyXG4gICAgcmlnaHQ6IFwicmlnaHRcIixcclxuICAgIGJvdHRvbTogXCJib3R0b21cIixcclxuICAgIGNlbnRlcjogXCJjZW50ZXJcIlxyXG59O1xyXG5cclxuT2JqZWN0LmZyZWV6ZShNYXNlclVJLlBhbmVsLkFsaWdubWVudCk7XHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gQ29uc3RydWN0aW9uID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBnYW1lXHJcbiAqIEBwYXJhbSBzZXR0aW5nc1xyXG4gKiBAcGFyYW0gdGV4dFxyXG4gKiBAcGFyYW0gc3R5bGVcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5NYXNlclVJLlRleHRCbG9jayA9IGZ1bmN0aW9uIChnYW1lLCBzZXR0aW5ncywgdGV4dCwgc3R5bGUpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgTWFzZXJVSS5QYW5lbC5jYWxsKHRoaXMsIGdhbWUsIHNldHRpbmdzKTtcclxuICAgIHRoaXMudGV4dEZpZWxkID0gbmV3IFBoYXNlci5UZXh0KGdhbWUsIDEsIDEsIHRleHQsIHN0eWxlKTtcclxuICAgIHRoaXMudGV4dEZpZWxkLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICB0aGlzLnRleHRGaWVsZC54ID0gdGhpcy53aWR0aCAqIDAuNTtcclxuICAgIHRoaXMudGV4dEZpZWxkLnkgPSB0aGlzLmhlaWdodCAqIDAuNTtcclxuICAgIHRoaXMuYWRkQ2hpbGQodGhpcy50ZXh0RmllbGQpO1xyXG4gICAgdGhpcy5yZXNpemVUb0ZpdFRleHQoKTtcclxufTtcclxuXHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBQcm90b3R5cGUgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLlRleHRCbG9jay5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hc2VyVUkuUGFuZWwucHJvdG90eXBlKTtcclxuTWFzZXJVSS5UZXh0QmxvY2sucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFzZXJVSS5UZXh0QmxvY2s7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IE1ldGhvZHMgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLlRleHRCbG9jay5wcm90b3R5cGUuc2V0VGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMudGV4dEZpZWxkLnNldFRleHQodGV4dCk7XHJcbn07XHJcbk1hc2VyVUkuVGV4dEJsb2NrLnByb3RvdHlwZS5zZXRBbmNob3JUbyA9IGZ1bmN0aW9uIChwaXZvdFgsIHBpdm90WSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLnRleHRGaWVsZC5hbmNob3Iuc2V0VG8ocGl2b3RYLCBwaXZvdFkpO1xyXG59O1xyXG5NYXNlclVJLlRleHRCbG9jay5wcm90b3R5cGUucmVzaXplVG9GaXRUZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMudGV4dHVyZS5mcmFtZS5oZWlnaHQgPSB0aGlzLnRleHRGaWVsZC5oZWlnaHQ7XHJcbiAgICB0aGlzLnRleHR1cmUuZnJhbWUud2lkdGggPSB0aGlzLnRleHRGaWVsZC53aWR0aDtcclxuICAgIHRoaXMudGV4dEZpZWxkLnggPSB0aGlzLnRleHRGaWVsZC53aWR0aCAqIDAuNTtcclxuICAgIHRoaXMudGV4dEZpZWxkLnkgPSB0aGlzLnRleHRGaWVsZC5oZWlnaHQgKiAwLjU7XHJcbiAgICB0aGlzLk9yaWdpbmFsU2l6ZSA9IG5ldyBQaGFzZXIuUG9pbnQodGhpcy50ZXh0RmllbGQud2lkdGgsIHRoaXMudGV4dEZpZWxkLmhlaWdodCk7XHJcbn07XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFByb3BlcnRpZXMgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTWFzZXJVSS5UZXh0QmxvY2sucHJvdG90eXBlLCBcIlRleHRIZWlnaHRcIiwge1xyXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0RmllbGQuaGVpZ2h0O1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gVXBkYXRlID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuTWFzZXJVSS5UZXh0QmxvY2sucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxufTtcclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBnYW1lXHJcbiAqIEBwYXJhbSBzZXR0aW5nc1xyXG4gKiBAcGFyYW0gYXRsYXNcclxuICogQHBhcmFtIGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBjYWxsYmFja0NvbnRleHRcclxuICogQHBhcmFtIHVwRnJhbWVcclxuICogQHBhcmFtIGRvd25GcmFtZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbk1hc2VyVUkuQnV0dG9uID0gZnVuY3Rpb24gKGdhbWUsIHNldHRpbmdzLCBhdGxhcywgY2FsbGJhY2ssIGNhbGxiYWNrQ29udGV4dCwgdXBGcmFtZSwgZG93bkZyYW1lKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICBNYXNlclVJLlBhbmVsLmNhbGwodGhpcywgZ2FtZSwgc2V0dGluZ3MpO1xyXG4gICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgIC8vIENyZWF0ZSBidXR0b25cclxuICAgIHRoaXMuYnV0dG9uID0gbmV3IFBoYXNlci5CdXR0b24oZ2FtZSwgMCwgMCwgYXRsYXMsIGNhbGxiYWNrLCBjYWxsYmFja0NvbnRleHQsIHVwRnJhbWUsIHVwRnJhbWUsIGRvd25GcmFtZSwgdXBGcmFtZSk7XHJcbiAgICB0aGlzLmJ1dHRvbi5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgdGhpcy5idXR0b24ueCA9IHRoaXMud2lkdGggKiAwLjU7XHJcbiAgICB0aGlzLmJ1dHRvbi55ID0gdGhpcy5oZWlnaHQgKiAwLjU7XHJcbiAgICB0aGlzLmFkZENoaWxkKHRoaXMuYnV0dG9uKTtcclxufTtcclxuXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFByb3RvdHlwZSA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbk1hc2VyVUkuQnV0dG9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUpO1xyXG5NYXNlclVJLkJ1dHRvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNYXNlclVJLkJ1dHRvbjtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gVXBkYXRlID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLyoqXHJcbiAqIEF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IFdvcmxkLnVwZGF0ZVxyXG4gKi9cclxuTWFzZXJVSS5CdXR0b24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG59O1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBMYWJlbHMgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLkJ1dHRvbi5wcm90b3R5cGUuYWRkTGFiZWwgPSBmdW5jdGlvbiAoZ2FtZSwgc2V0dGluZ3MsIHRleHQsIHN0eWxlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMubGFiZWwgPSBuZXcgTWFzZXJVSS5UZXh0QmxvY2soZ2FtZSwgc2V0dGluZ3MsIHRleHQsIHN0eWxlKTtcclxuICAgIHRoaXMubGFiZWwuc2V0QWxpZ25tZW50KFtNYXNlclVJLlBhbmVsLkFsaWdubWVudC5jZW50ZXJdKTtcclxuICAgIHRoaXMubGFiZWwuc2V0UGl2b3QobmV3IFBoYXNlci5Qb2ludCgwLjUsIDAuNSkpO1xyXG4gICAgdGhpcy5sYWJlbC5TdHJldGNoID0gTWFzZXJVSS5QYW5lbC5TdHJldGNoT3B0aW9ucy51bmlmb3JtO1xyXG4gICAgdGhpcy5sYWJlbC5pbnB1dEVuYWJsZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5sYWJlbCk7XHJcbn07XHJcbk1hc2VyVUkuQnV0dG9uLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgaWYgKHRoaXMubGFiZWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMubGFiZWwuc2V0VGV4dCh0ZXh0KTtcclxuICAgIH1cclxufTtcclxuTWFzZXJVSS5CdXR0b24ucHJvdG90eXBlLnNldFN0eWxlID0gZnVuY3Rpb24gKHN0eWxlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGlmICh0aGlzLmxhYmVsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLmxhYmVsLnNldFN0eWxlKHN0eWxlKTtcclxuICAgIH1cclxufTtcclxuXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IE1ldGhvZHMgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLkJ1dHRvbi5wcm90b3R5cGUuZmxpcEhvcml6b250YWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMuYnV0dG9uLnNjYWxlLnggPSAtMTtcclxufTtcclxuTWFzZXJVSS5CdXR0b24ucHJvdG90eXBlLmZsaXBWZXJ0aWNhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdGhpcy5idXR0b24uc2NhbGUueSA9IC0xO1xyXG59O1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IENvbnN0cnVjdGlvbiA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbk1hc2VyVUkuVG9nZ2xlQnV0dG9uID0gZnVuY3Rpb24gKGdhbWUsIGlzVG9nZ2xlZE9uKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIE1hc2VyVUkuUGFuZWwuY2FsbCh0aGlzLCBnYW1lLCB7d2lkdGg6MTAyLCBoZWlnaHQ6NjMsIHJlbGF0aXZlU2l6ZTpbMC4yLDBdLCBzdHJldGNoOk1hc2VyVUkuUGFuZWwuU3RyZXRjaE9wdGlvbnMudW5pZm9ybX0pO1xyXG5cclxuICAgIC8vIEFkZCBiYWNraW5nXHJcbiAgICB0aGlzLmJhY2tpbmcgPSBuZXcgUGhhc2VyLlNwcml0ZShnYW1lLCAwLCAwLCBcImdhbWVBdGxhc1wiLCBcInRvZ2dsZV9vZmYucG5nXCIpO1xyXG4gICAgdGhpcy5iYWNraW5nLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICB0aGlzLmFkZENoaWxkKHRoaXMuYmFja2luZyk7XHJcblxyXG4gICAgLy8gQWRkIGZpbGxcclxuICAgIHRoaXMuZmlsbCA9IG5ldyBQaGFzZXIuU3ByaXRlKGdhbWUsIDAsIDAsIFwiZ2FtZUF0bGFzXCIsIFwidG9nZ2xlX29uLnBuZ1wiKTtcclxuICAgIHRoaXMuZmlsbC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG4gICAgdGhpcy5hZGRDaGlsZCh0aGlzLmZpbGwpO1xyXG5cclxuICAgIC8vIEFkZCBidXR0b25cclxuICAgIHRoaXMuc3dpdGNoID0gbmV3IFBoYXNlci5TcHJpdGUoZ2FtZSwgMCwgMCwgXCJnYW1lQXRsYXNcIiwgXCJ0b2dnbGVfc3dpdGNoLnBuZ1wiKTtcclxuICAgIHRoaXMuc3dpdGNoLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICB0aGlzLnN3aXRjaC5zY2FsZS54ID0gdGhpcy5zd2l0Y2guc2NhbGUueSA9IDE7XHJcbiAgICB0aGlzLmFkZENoaWxkKHRoaXMuc3dpdGNoKTtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIHN0YXRlXHJcbiAgICB0aGlzLnNldFN0YXRlKGlzVG9nZ2xlZE9uKTtcclxufTtcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBQcm90b3R5cGUgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLlRvZ2dsZUJ1dHRvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hc2VyVUkuUGFuZWwucHJvdG90eXBlKTtcclxuTWFzZXJVSS5Ub2dnbGVCdXR0b24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFzZXJVSS5Ub2dnbGVCdXR0b247XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IE1ldGhvZHMgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLlRvZ2dsZUJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoaXNUb2dnbGVkT24pIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdGhpcy5pc1RvZ2dsZWRPbiA9IGlzVG9nZ2xlZE9uO1xyXG4gICAgaWYgKHRoaXMuaXNUb2dnbGVkT24pIHtcclxuICAgICAgICB0aGlzLmZpbGwuc2NhbGUueCA9IHRoaXMuZmlsbC5zY2FsZS55ID0gMTtcclxuICAgICAgICB0aGlzLnN3aXRjaC54ID0gdGhpcy5iYWNraW5nLndpZHRoICogMC4yMztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmlsbC5zY2FsZS54ID0gdGhpcy5maWxsLnNjYWxlLnkgPSAwO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoLnggPSB0aGlzLmJhY2tpbmcud2lkdGggKiAtMC4yMztcclxuICAgIH1cclxufTtcclxuXHJcbk1hc2VyVUkuVG9nZ2xlQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGlmICh0aGlzLmlzVG9nZ2xlZE9uKSB7XHJcbiAgICAgICAgdGhpcy50b2dnbGVPZmYoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlT24oKTtcclxuICAgIH1cclxufTtcclxuXHJcbk1hc2VyVUkuVG9nZ2xlQnV0dG9uLnByb3RvdHlwZS50b2dnbGVPbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgLy8gQ2hhbmdlIHN0YXRlXHJcbiAgICB0aGlzLmlzVG9nZ2xlZE9uID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBBbmltYXRlIGZpbGxcclxuICAgIHZhciBmaWxsVHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuZmlsbC5zY2FsZSk7XHJcbiAgICBmaWxsVHdlZW4udG8oe3g6MSwgeToxfSwgMC4xNiAqIDEwMDAsIFBoYXNlci5FYXNpbmcuQ3ViaWMuT3V0KTtcclxuICAgIGZpbGxUd2Vlbi5zdGFydCgpO1xyXG5cclxuICAgIC8vIEFuaW1hdGUgc3dpdGNoXHJcbiAgICB2YXIgc3dpdGNoVHdlZW4gPSB0aGlzLmdhbWUuYWRkLnR3ZWVuKHRoaXMuc3dpdGNoKTtcclxuICAgIHN3aXRjaFR3ZWVuLnRvKHt4OnRoaXMuYmFja2luZy53aWR0aCAqIDAuMjN9LCAwLjA4ICogMTAwMCwgUGhhc2VyLkVhc2luZy5DdWJpYy5PdXQpO1xyXG4gICAgc3dpdGNoVHdlZW4uc3RhcnQoKTtcclxufTtcclxuXHJcbk1hc2VyVUkuVG9nZ2xlQnV0dG9uLnByb3RvdHlwZS50b2dnbGVPZmYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIC8vIENoYW5nZSBzdGF0ZVxyXG4gICAgdGhpcy5pc1RvZ2dsZWRPbiA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEFuaW1hdGUgZmlsbFxyXG4gICAgdmFyIGZpbGxUd2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5maWxsLnNjYWxlKTtcclxuICAgIGZpbGxUd2Vlbi50byh7eDowLCB5OjB9LCAwLjE2ICogMTAwMCwgUGhhc2VyLkVhc2luZy5DdWJpYy5PdXQpO1xyXG4gICAgZmlsbFR3ZWVuLnN0YXJ0KCk7XHJcblxyXG4gICAgLy8gQW5pbWF0ZSBzd2l0Y2hcclxuICAgIHZhciBzd2l0Y2hUd2VlbiA9IHRoaXMuZ2FtZS5hZGQudHdlZW4odGhpcy5zd2l0Y2gpO1xyXG4gICAgc3dpdGNoVHdlZW4udG8oe3g6dGhpcy5iYWNraW5nLndpZHRoICogLTAuMjN9LCAwLjA4ICogMTAwMCwgUGhhc2VyLkVhc2luZy5DdWJpYy5PdXQpO1xyXG4gICAgc3dpdGNoVHdlZW4uc3RhcnQoKTtcclxufTtcclxuLyoqXHJcbiAqIFNsaWRlciB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgc2Nyb2xsIGNvbnRyb2xcclxuICogQHBhcmFtIGdhbWVcclxuICogQHBhcmFtIHdpZHRoXHJcbiAqIEBwYXJhbSBoZWlnaHRcclxuICogQHBhcmFtIHNsaWRlckJhY2tJbWFnZSBrZXkgb2YgaW1hZ2Ugb2Ygc2xpZGVyIGJhY2tncm91bmRcclxuICogQHBhcmFtIHNsaWRlckltYWdlIGtleSBvZiBpbWFnZSBvZiBzbGlkZXIgY29udHJvbGxlclxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbk1hc2VyVUkuU2xpZGVyID0gZnVuY3Rpb24gKGdhbWUsIHNldHRpbmdzLCBhdGxhcywgc2xpZGVyQmFja0ltYWdlLCBzbGlkZXJJbWFnZSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgTWFzZXJVSS5QYW5lbC5jYWxsKHRoaXMsIGdhbWUsIHNldHRpbmdzKTtcclxuICAgIHRoaXMuc2xpZGVySW1hZ2UgPSBuZXcgUGhhc2VyLkltYWdlKHRoaXMuZ2FtZSwgc2V0dGluZ3Mud2lkdGgvMiwgMCwgYXRsYXMsIHNsaWRlckltYWdlKTtcclxuICAgIHRoaXMuc2xpZGVySW1hZ2UuYW5jaG9yID0gbmV3IFBoYXNlci5Qb2ludCgwLjUsMC41KTtcclxuXHJcbiAgICB0aGlzLnNsaWRlckJhY2tJbWFnZSA9IG5ldyBQaGFzZXIuSW1hZ2UodGhpcy5nYW1lLCBzZXR0aW5ncy53aWR0aC8yLCAwLCBhdGxhcywgc2xpZGVyQmFja0ltYWdlKTtcclxuICAgIHRoaXMuc2xpZGVyQmFja0ltYWdlLmFuY2hvciA9IG5ldyBQaGFzZXIuUG9pbnQoMC41LDApO1xyXG4gICAgdGhpcy5zbGlkZXJCYWNrSW1hZ2UuaGVpZ2h0ID0gc2V0dGluZ3MuaGVpZ2h0O1xyXG4gICAgdGhpcy52YWx1ZUNoYW5nZWQgPSBuZXcgUGhhc2VyLlNpZ25hbCgpO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5zbGlkZXJCYWNrSW1hZ2UpO1xyXG4gICAgdGhpcy5hZGRDaGlsZCh0aGlzLnNsaWRlckltYWdlKTtcclxuXHJcbiAgICB0aGlzLmlucHV0RW5hYmxlZCA9IHRydWU7XHJcbiAgICB0aGlzLmV2ZW50cy5vbklucHV0VXAuYWRkKHRoaXMub25TbGlkZXJiYWNrZ3JvdW5kQ2xpY2ssIHRoaXMpO1xyXG5cclxuICAgIHRoaXMuc2xpZGVySW1hZ2UuaW5wdXRFbmFibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuc2xpZGVySW1hZ2UuaW5wdXQucHJpb3JpdHlJRCA9IDE7XHJcbiAgICB0aGlzLnNsaWRlckltYWdlLmV2ZW50cy5vbklucHV0RG93bi5hZGQodGhpcy5vblNsaWRlU3RhcnQsIHRoaXMpO1xyXG4gICAgdGhpcy5nYW1lLmlucHV0Lm9uVXAuYWRkKHRoaXMub25TbGlkZUVuZCwgdGhpcyk7XHJcblxyXG59O1xyXG5NYXNlclVJLlNsaWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hc2VyVUkuUGFuZWwucHJvdG90eXBlKTtcclxuTWFzZXJVSS5TbGlkZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFzZXJVSS5TbGlkZXI7XHJcbk1hc2VyVUkuU2xpZGVyLnByb3RvdHlwZS5vblNsaWRlcmJhY2tncm91bmRDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdGhpcy5zbGlkZXJJbWFnZS55ID0gdGhpcy50b0xvY2FsKG5ldyBQaGFzZXIuUG9pbnQodGhpcy5nYW1lLmlucHV0LmFjdGl2ZVBvaW50ZXIud29ybGRYLCB0aGlzLmdhbWUuaW5wdXQuYWN0aXZlUG9pbnRlci53b3JsZFkpKS55O1xyXG4gICAgdmFyIHZhbHVlID0gdGhpcy5zbGlkZXJJbWFnZS55IC8gKHRoaXMuaGVpZ2h0KTtcclxuICAgIHZhbHVlID0gUGhhc2VyLk1hdGgucm91bmRUbyh2YWx1ZSwgLTIpO1xyXG4gICAgdmFsdWUgPSBQaGFzZXIuTWF0aC5jbGFtcCh2YWx1ZSwgMCwgMSk7XHJcbiAgICB0aGlzLnZhbHVlQ2hhbmdlZC5kaXNwYXRjaCh2YWx1ZSk7XHJcbn07XHJcbk1hc2VyVUkuU2xpZGVyLnByb3RvdHlwZS5vblNsaWRlU3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHRoaXMuc2xpZGUgPSB0cnVlO1xyXG59O1xyXG5NYXNlclVJLlNsaWRlci5wcm90b3R5cGUub25TbGlkZUVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdGhpcy5zbGlkZSA9IGZhbHNlO1xyXG59O1xyXG5cclxuTWFzZXJVSS5TbGlkZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBhY3RpdmVQb2ludGVyID0gdGhpcy5nYW1lLmlucHV0LmFjdGl2ZVBvaW50ZXI7XHJcbiAgICBpZiAoYWN0aXZlUG9pbnRlci5pc0Rvd24gJiYgdGhpcy5zbGlkZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHZhciB5ID0gdGhpcy50b0xvY2FsKG5ldyBQaGFzZXIuUG9pbnQoYWN0aXZlUG9pbnRlci53b3JsZFgsIGFjdGl2ZVBvaW50ZXIud29ybGRZKSkueTtcclxuICAgICAgICB0aGlzLnNsaWRlckltYWdlLnkgPSB5O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnNsaWRlckltYWdlLnkgPD0gdGhpcy5zbGlkZXJJbWFnZS5oZWlnaHQvMikge1xyXG4gICAgICAgIHRoaXMuc2xpZGVySW1hZ2UueSA9IHRoaXMuc2xpZGVySW1hZ2UuaGVpZ2h0LzI7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5zbGlkZXJJbWFnZS55ID4gdGhpcy5nZXRMb2NhbEJvdW5kcygpLmhlaWdodCAtIHRoaXMuc2xpZGVySW1hZ2UuaGVpZ2h0LzIpIHtcclxuICAgICAgICB0aGlzLnNsaWRlckltYWdlLnkgPSB0aGlzLmdldExvY2FsQm91bmRzKCkuaGVpZ2h0LXRoaXMuc2xpZGVySW1hZ2UuaGVpZ2h0LzI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc2xpZGUpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSAodGhpcy5zbGlkZXJJbWFnZS55IC0gdGhpcy5zbGlkZXJJbWFnZS5oZWlnaHQvMikgLyAodGhpcy5nZXRMb2NhbEJvdW5kcygpLmhlaWdodCAtIHRoaXMuc2xpZGVySW1hZ2UuaGVpZ2h0KTtcclxuICAgICAgICB2YWx1ZSA9IFBoYXNlci5NYXRoLnJvdW5kVG8odmFsdWUsIC0yKTtcclxuICAgICAgICB2YWx1ZSA9IFBoYXNlci5NYXRoLmNsYW1wKHZhbHVlLCAwLCAxKTtcclxuICAgICAgICAvL3RoaXMuZ2FtZS5kZWJ1Zy50ZXh0KFwidmFsdWU6IFwiICsgdmFsdWUsIDEwMCwgNDMwKTtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5kaXNwYXRjaCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvL3RoaXMuZ2FtZS5kZWJ1Zy5zcHJpdGVJbmZvKHRoaXMsIDMyLCAxODApO1xyXG4gICAgLy8vL3RoaXMuZ2FtZS5kZWJ1Zy5pbnB1dEluZm8oMzIsIDMyKTtcclxuICAgIC8vdGhpcy5nYW1lLmRlYnVnLnNwcml0ZUlucHV0SW5mbyh0aGlzLCAzMiwgMTMwKTtcclxuICAgIC8vdGhpcy5nYW1lLmRlYnVnLnBvaW50ZXIoYWN0aXZlUG9pbnRlcik7XHJcbiAgICAvL3RoaXMuZ2FtZS5kZWJ1Zy5zcHJpdGVCb3VuZHModGhpcyk7XHJcbiAgICAvL3RoaXMuZ2FtZS5kZWJ1Zy50ZXh0KHRoaXMudG9Mb2NhbChuZXcgUGhhc2VyLlBvaW50KGFjdGl2ZVBvaW50ZXIud29ybGRYLCBhY3RpdmVQb2ludGVyLndvcmxkWSkpLCAxMDAsIDM4MCk7XHJcbiAgIC8vIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KHRoaXMuZ2V0TG9jYWxCb3VuZHMoKSwgMTAwLCA0MDApO1xyXG4gICAgLy9pZih0aGlzLnNsaWRlKXtcclxuICAgIC8vICBpZih0aGlzLnNsaWRlckltYWdlLnBvc2l0aW9uLnkgKyB0aGlzLnNsaWRlckltYWdlLmhlaWdodCowLjUgPCAwKSB7XHJcbiAgICAvLyAgICAgIHRoaXMuc2xpZGVySW1hZ2UucG9zaXRpb24ueSA9IC0gdGhpcy5zbGlkZXJJbWFnZS5oZWlnaHQqMC41IDtcclxuICAgIC8vICAgICAgcmV0dXJuO1xyXG4gICAgLy8gIH1cclxuICAgIC8vICBpZih0aGlzLnNsaWRlckltYWdlLnBvc2l0aW9uLnkgKyB0aGlzLnNsaWRlckltYWdlLmhlaWdodCowLjUgPiB0aGlzLnNsaWRlckJhY2tJbWFnZS5oZWlnaHQgKVxyXG4gICAgLy8gIHtcclxuICAgIC8vICAgICAgdGhpcy5zbGlkZXJJbWFnZS5wb3NpdGlvbi55ID0gdGhpcy5zbGlkZXJCYWNrSW1hZ2UuaGVpZ2h0IC0gdGhpcy5zbGlkZXJJbWFnZS5oZWlnaHQqMC41IDtcclxuICAgIC8vICB9XHJcbiAgICAvL31cclxufTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gQ29uc3RydWN0aW9uID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuTWFzZXJVSS5TdGFja1BhbmVsID0gZnVuY3Rpb24gKGdhbWUsIHNldHRpbmdzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIE1hc2VyVUkuUGFuZWwuY2FsbCh0aGlzLCBnYW1lLCBzZXR0aW5ncyk7XHJcbiAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSAwO1xyXG4gICAgdGhpcy50b3RhbEhlaWdodCA9IDA7XHJcblxyXG4gICAgLy8gQWRkIG1hc2tcclxuICAgIHZhciBtYXNrID0gbmV3IFBoYXNlci5HcmFwaGljcyh0aGlzLmdhbWUsIDAsIDApO1xyXG4gICAgbWFzay5iZWdpbkZpbGwoMHhmZmZmZmYpO1xyXG4gICAgbWFzay5kcmF3UmVjdCgwLCAwLCBzZXR0aW5ncy53aWR0aCwgc2V0dGluZ3MuaGVpZ2h0KTtcclxuICAgIHRoaXMuYWRkQ2hpbGQobWFzayk7XHJcbiAgICB0aGlzLm1hc2sgPSBtYXNrO1xyXG59O1xyXG5cclxuTWFzZXJVSS5TdGFja1BhbmVsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWFzZXJVSS5QYW5lbC5wcm90b3R5cGUpO1xyXG5NYXNlclVJLlN0YWNrUGFuZWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFzZXJVSS5TdGFja1BhbmVsO1xyXG5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT0gSXRlbXMgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLlN0YWNrUGFuZWwucHJvdG90eXBlLmFkZEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICB0aGlzLmFkZENoaWxkKGl0ZW0pO1xyXG59O1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PSBVcGRhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5NYXNlclVJLlN0YWNrUGFuZWwucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgLy92YXIgYWN0aXZlUG9pbnRlciA9IHRoaXMuZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyO1xyXG4gICAgLy90aGlzLmdhbWUuZGVidWcuc3ByaXRlSW5mbyh0aGlzLCAzMiwgMTMwKTtcclxuICAgIC8vdGhpcy5nYW1lLmRlYnVnLnBvaW50ZXIoYWN0aXZlUG9pbnRlcik7XHJcbiAgICAvL3RoaXMuZ2FtZS5kZWJ1Zy5zcHJpdGVCb3VuZHModGhpcyk7XHJcblxyXG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydFBvc2l0aW9uO1xyXG4gICAgdGhpcy50b3RhbEhlaWdodCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcbiAgICAgICAgdmFyIHRvcE1hcmdpbiA9IGl0ZW0uZ2V0TWFyZ2luKE1hc2VyVUkuUGFuZWwuQWxpZ25tZW50LnRvcCkgKiBpdGVtLmhlaWdodDtcclxuICAgICAgICB2YXIgYm90dG9tTWFyZ2luID0gaXRlbS5nZXRNYXJnaW4oTWFzZXJVSS5QYW5lbC5BbGlnbm1lbnQuYm90dG9tKSAqIGl0ZW0uaGVpZ2h0O1xyXG4gICAgICAgIGl0ZW0ucG9zaXRpb24ueSA9IHN0YXJ0ICsgdG9wTWFyZ2luO1xyXG5cclxuICAgICAgICAvL1RPRE86W3RrYWNoZW5rb10gaGFjayBzaG91bGQgYmUgZml4ZWQgaW4gcGFuZWwgdHJhbnNmb3JtYXRpb24gbWF0cml4XHJcbiAgICAgICAgdmFyIGl0ZW1Ub3RhbEhlaWdodCA9IChpdGVtLmhlaWdodCArIHRvcE1hcmdpbiArIGJvdHRvbU1hcmdpbik7XHJcbiAgICAgICAgdGhpcy50b3RhbEhlaWdodCArPSBpdGVtVG90YWxIZWlnaHQ7XHJcbiAgICAgICAgc3RhcnQgKz0gaXRlbVRvdGFsSGVpZ2h0O1xyXG5cclxuICAgICAgICBpdGVtLmF1dG9DdWxsID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFBhbmVsLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzKTtcclxufTtcclxuTWFzZXJVSS5MaXN0Qm94ID0gZnVuY3Rpb24gKGdhbWUsIHNldHRpbmdzLCBhdGxhcywgc2xpZGVyQmFja0ltYWdlLCBzbGlkZXJJbWFnZSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBNYXNlclVJLlN0YWNrUGFuZWwuY2FsbCh0aGlzLCBnYW1lLCBzZXR0aW5ncyk7XHJcbiAgICB0aGlzLnNsaWRlciA9IG5ldyBNYXNlclVJLlNsaWRlcihnYW1lLCB7d2lkdGg6c2V0dGluZ3Mud2lkdGggKiAwLjIsIGhlaWdodDpzZXR0aW5ncy5oZWlnaHR9LGF0bGFzLCBzbGlkZXJCYWNrSW1hZ2UsIHNsaWRlckltYWdlKTtcclxuICAgIHRoaXMuc2xpZGVyLnNldEFsaWdubWVudChbTWFzZXJVSS5QYW5lbC5BbGlnbm1lbnQucmlnaHQsTWFzZXJVSS5QYW5lbC5BbGlnbm1lbnQudG9wXSk7XHJcbiAgICB0aGlzLnNsaWRlci5zZXRQaXZvdChuZXcgUGhhc2VyLlBvaW50KDEsIDApKTtcclxuICAgIHRoaXMuc2xpZGVyLnNldFJlbGF0aXZlU2l6ZSgwLjIsIDAuOTkpO1xyXG4gICAgdGhpcy5zbGlkZXIucmVzdHJpY3RXaWR0aFN0cmV0Y2hpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5hZGRDaGlsZCh0aGlzLnNsaWRlcik7XHJcbiAgICB0aGlzLnNsaWRlci52YWx1ZUNoYW5nZWQuYWRkKHRoaXMub25TY3JvbGwsIHRoaXMpO1xyXG59O1xyXG5NYXNlclVJLkxpc3RCb3gucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXNlclVJLlN0YWNrUGFuZWwucHJvdG90eXBlKTtcclxuTWFzZXJVSS5MaXN0Qm94LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1hc2VyVUkuTGlzdEJveDtcclxuTWFzZXJVSS5MaXN0Qm94LnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgbmV4dFBvc2l0aW9uID0gKHRoaXMudG90YWxIZWlnaHQgLSB0aGlzLmhlaWdodC90aGlzLnNjYWxlLnkpICogdmFsdWU7XHJcblxyXG4gICAgaWYgKHRoaXMuaGVpZ2h0L3RoaXMuc2NhbGUueSA8PSAodGhpcy50b3RhbEhlaWdodCAtIG5leHRQb3NpdGlvbikpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSAtbmV4dFBvc2l0aW9uO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEJyaW5nIHNsaWRlciBlbGVtZW50IHRvIHRoZSB0b3Agb2YgdGhlIGRpc3BsYXlcclxuICovXHJcbk1hc2VyVUkuTGlzdEJveC5wcm90b3R5cGUuYnJpbmdTbGlkZXJUb1RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgaWYgKHRoaXMuc2xpZGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLnNsaWRlcik7XHJcbiAgICB9XHJcbn07XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IE1hc2VyVUk7XHJcbn0pLmNhbGwodGhpcyk7XHJcbiIsInZhciBCb290ID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG5cclxuQm9vdC5wcm90b3R5cGUgPSB7XHJcblxyXG4gICAgcHJlbG9hZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiYm9vdCBzdGFydGVkXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICB0aGlzLmdhbWUuc2NhbGUuc2NhbGVNb2RlID0gUGhhc2VyLlNjYWxlTWFuYWdlci5SRVNJWkU7XHJcbiAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnBhZ2VBbGlnbkhvcml6b250YWxseSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5nYW1lLnNjYWxlLnBhZ2VBbGlnblZlcnRpY2FsbHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnRGVtbycpO1xyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCb290O1xyXG4iLCJ2YXIgTWFzZXJVSSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9idWlsZC9tYXNlclVJXCIpO1xyXG52YXIgUGFuZWwgPSBNYXNlclVJLlBhbmVsO1xyXG52YXIgRGVtbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IERlbW87XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09IFByb3RvdHlwZSA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbkRlbW8ucHJvdG90eXBlID0ge1xyXG5cclxuICAgIC8vIHJlZ2lvbiA9PT09PT09PT09PT09PT09PT09PT09PT09IENyZWF0aW9uID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHRoaXMucGFuZWxzRGVtbygpO1xyXG4gICAgfSxcclxuICAgIHBhbmVsc0RlbW86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICB2YXIgcm9vdFBhbmVsID0gbmV3IFBhbmVsKHRoaXMuZ2FtZSwge1xyXG4gICAgICAgICAgICBiYWNrQ29sb3I6XCIjRkYwMDAwXCIsXHJcbiAgICAgICAgICAgIGFsaWdubWVudDpbUGFuZWwuQWxpZ25tZW50LmNlbnRlcl0sXHJcbiAgICAgICAgICAgIHBpdm90OlswLjUsMC41XSxcclxuICAgICAgICAgICAgcmVsYXRpdmVTaXplOlswLjUsMC41XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvb3RQYW5lbC5zY2FsZS54ID0gMC41O1xyXG4gICAgICAgIHJvb3RQYW5lbC5zY2FsZS55ID0gMC41O1xyXG5cclxuICAgICAgICB2YXIgcGFuZWwgPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOjUwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6NTAsXHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIjAwRkYwMFwiLFxyXG4gICAgICAgICAgICBhbGlnbm1lbnQ6W1BhbmVsLkFsaWdubWVudC5sZWZ0XSxcclxuICAgICAgICAgICAgcGl2b3Q6WzAsMC41XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvb3RQYW5lbC5hZGRDaGlsZChwYW5lbCk7XHJcblxyXG4gICAgICAgIHZhciBwYW5lbCA9IG5ldyBQYW5lbCh0aGlzLmdhbWUsIHtcclxuICAgICAgICAgICAgd2lkdGg6NTAsXHJcbiAgICAgICAgICAgIGhlaWdodDo1MCxcclxuICAgICAgICAgICAgYmFja0NvbG9yOlwiIzAwRkYwMFwiLFxyXG4gICAgICAgICAgICBhbGlnbm1lbnQ6W1BhbmVsLkFsaWdubWVudC5yaWdodF0sXHJcbiAgICAgICAgICAgIHBpdm90OlsxLDAuNV1cclxuICAgICAgICB9KTtcclxuICAgICAgICByb290UGFuZWwuYWRkQ2hpbGQocGFuZWwpO1xyXG5cclxuICAgICAgICB2YXIgcGFuZWwgPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOjUwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6NTAsXHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIiMwMEZGMDBcIixcclxuICAgICAgICAgICAgYWxpZ25tZW50OltQYW5lbC5BbGlnbm1lbnQudG9wXSxcclxuICAgICAgICAgICAgcGl2b3Q6WzAuNSwwXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvb3RQYW5lbC5hZGRDaGlsZChwYW5lbCk7XHJcblxyXG4gICAgICAgIHZhciBwYW5lbCA9IG5ldyBQYW5lbCh0aGlzLmdhbWUsIHtcclxuICAgICAgICAgICAgd2lkdGg6NTAsXHJcbiAgICAgICAgICAgIGhlaWdodDo1MCxcclxuICAgICAgICAgICAgYmFja0NvbG9yOlwiIzAwRkYwMFwiLFxyXG4gICAgICAgICAgICBhbGlnbm1lbnQ6W1BhbmVsLkFsaWdubWVudC5ib3R0b21dLFxyXG4gICAgICAgICAgICBwaXZvdDpbMC41LDFdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcm9vdFBhbmVsLmFkZENoaWxkKHBhbmVsKTtcclxuXHJcbiAgICAgICAgdmFyIHBhbmVsMSA9IG5ldyBQYW5lbCh0aGlzLmdhbWUsIHtcclxuICAgICAgICAgICAgd2lkdGg6NTAsXHJcbiAgICAgICAgICAgIGhlaWdodDo1MCxcclxuICAgICAgICAgICAgYmFja0NvbG9yOlwiIzAwMDBGRlwiLFxyXG4gICAgICAgICAgICBhbGlnbm1lbnQ6W1BhbmVsLkFsaWdubWVudC5jZW50ZXJdLFxyXG4gICAgICAgICAgICBwaXZvdDpbMC41LDAuNV1cclxuICAgICAgICB9KTtcclxuICAgICAgICByb290UGFuZWwuYWRkQ2hpbGQocGFuZWwxKTtcclxuICAgICAgICB2YXIgY2VudGVyQm90dG9tID0gbmV3IFBhbmVsKHRoaXMuZ2FtZSwge1xyXG4gICAgICAgICAgICB3aWR0aDo1MCxcclxuICAgICAgICAgICAgaGVpZ2h0OjUwLFxyXG4gICAgICAgICAgICBiYWNrQ29sb3I6XCIjMDBGRkZGXCIsXHJcbiAgICAgICAgICAgIHBpdm90OlswLjUsMC41XSxcclxuICAgICAgICAgICAgYWxpZ25tZW50OltQYW5lbC5BbGlnbm1lbnQuY2VudGVyXVxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICBjZW50ZXJCb3R0b20uc2V0TGlua2VkQW5jaG9ycyh1bmRlZmluZWQscGFuZWwxLHVuZGVmaW5lZCxwYW5lbCk7XHJcbiAgICAgICAgcm9vdFBhbmVsLmFkZENoaWxkKGNlbnRlckJvdHRvbSk7XHJcblxyXG4gICAgICAgIHZhciBwYW5lbDEgPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOjIwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6MjAsXHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIiNGRkZGRkZcIixcclxuICAgICAgICAgICAgYWxpZ25tZW50OltQYW5lbC5BbGlnbm1lbnQuY2VudGVyXSxcclxuICAgICAgICAgICAgcGl2b3Q6WzAuNSwwLjVdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGFuZWwuYWRkQ2hpbGQocGFuZWwxKTtcclxuXHJcbiAgICAgICAgdmFyIGxlZnRUb3AgPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIiNGRkZGMDBcIixcclxuICAgICAgICAgICAgYWxpZ25tZW50OltQYW5lbC5BbGlnbm1lbnQudG9wLCBQYW5lbC5BbGlnbm1lbnQubGVmdF0sXHJcbiAgICAgICAgICAgIHJlbGF0aXZlU2l6ZTpbMC4xLDAuMV1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKGxlZnRUb3ApO1xyXG5cclxuICAgICAgICB2YXIgcmlnaHRUb3AgPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIiNGRkZGMDBcIixcclxuICAgICAgICAgICAgYWxpZ25tZW50OlsgUGFuZWwuQWxpZ25tZW50LnJpZ2h0LCBQYW5lbC5BbGlnbm1lbnQudG9wXSxcclxuICAgICAgICAgICAgcGl2b3Q6WzEsIDBdLFxyXG4gICAgICAgICAgICByZWxhdGl2ZVNpemU6WzAuMSwgMC4xXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQuZXhpc3RpbmcocmlnaHRUb3ApO1xyXG5cclxuICAgICAgICB2YXIgbGVmdEJvdHRvbSA9IG5ldyBQYW5lbCh0aGlzLmdhbWUsIHtcclxuICAgICAgICAgICAgYmFja0NvbG9yOlwiI0ZGRkYwMFwiLFxyXG4gICAgICAgICAgICBhbGlnbm1lbnQ6W1BhbmVsLkFsaWdubWVudC5ib3R0b20sIFBhbmVsLkFsaWdubWVudC5sZWZ0XSxcclxuICAgICAgICAgICAgcGl2b3Q6WzAsMV0sXHJcbiAgICAgICAgICAgIHJlbGF0aXZlU2l6ZTpbMC4xLDAuMV1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKGxlZnRCb3R0b20pO1xyXG5cclxuICAgICAgICB2YXIgcmlnaHRCb3R0b20gPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIiNGRkZGMDBcIixcclxuICAgICAgICAgICAgYWxpZ25tZW50OltQYW5lbC5BbGlnbm1lbnQuYm90dG9tLCBQYW5lbC5BbGlnbm1lbnQucmlnaHRdLFxyXG4gICAgICAgICAgICBwaXZvdDpbMSwxXSxcclxuICAgICAgICAgICAgcmVsYXRpdmVTaXplOlswLjEsMC4xXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQuZXhpc3RpbmcocmlnaHRCb3R0b20pO1xyXG5cclxuICAgICAgICB2YXIgYm90dG9tUGFuZWwgPSBuZXcgUGFuZWwodGhpcy5nYW1lLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOjMwMCxcclxuICAgICAgICAgICAgaGVpZ2h0OjUwLFxyXG4gICAgICAgICAgICBiYWNrQ29sb3I6XCIjMDBGRkZGXCIsXHJcbiAgICAgICAgICAgIHBpdm90OlswLjUsMV1cclxuICAgICAgICB9KTtcclxuICAgICAgICBib3R0b21QYW5lbC5zZXRMaW5rZWRBbmNob3JzKGxlZnRCb3R0b20sdW5kZWZpbmVkLHJpZ2h0Qm90dG9tKTtcclxuICAgICAgICB0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKGJvdHRvbVBhbmVsKTtcclxuXHJcbiAgICAgICAgdmFyIGxlZnRQYW5lbCA9IG5ldyBQYW5lbCh0aGlzLmdhbWUsIHtcclxuICAgICAgICAgICAgd2lkdGg6MzAwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6NTAsXHJcbiAgICAgICAgICAgIGJhY2tDb2xvcjpcIiMwMEZGRkZcIixcclxuICAgICAgICAgICAgcGl2b3Q6WzAsMF1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGVmdFBhbmVsLnNldExpbmtlZEFuY2hvcnModW5kZWZpbmVkLGxlZnRUb3AsdW5kZWZpbmVkLGxlZnRCb3R0b20pO1xyXG4gICAgICAgIHRoaXMuZ2FtZS5hZGQuZXhpc3RpbmcobGVmdFBhbmVsKTtcclxuXHJcbiAgICAgICAgdGhpcy5nYW1lLmFkZC5leGlzdGluZyhyb290UGFuZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGVuZHJlZ2lvblxyXG5cclxuXHJcbn07XHJcbiJdfQ==
